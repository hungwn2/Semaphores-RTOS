
roundRobinScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001844  08001844  00002844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018b8  080018b8  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080018b8  080018b8  000028b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018c0  080018c0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018c0  080018c0  000028c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018c4  080018c4  000028c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080018c8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  2000005c  08001924  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  08001924  000034b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000156b  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000734  00000000  00000000  000045f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00004d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000146  00000000  00000000  00004f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000216b  00000000  00000000  0000504e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002746  00000000  00000000  000071b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055a90  00000000  00000000  000098ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005f38f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d98  00000000  00000000  0005f3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0006016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800182c 	.word	0x0800182c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800182c 	.word	0x0800182c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <task0>:
void valve_open(void);
void valve_close(void);
void motor_stop(void);


void task0(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	while(1){
		Task0_Profiler++;
 8000284:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <task0+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a03      	ldr	r2, [pc, #12]	@ (8000298 <task0+0x18>)
 800028c:	6013      	str	r3, [r2, #0]
		motor_run();
 800028e:	f000 f835 	bl	80002fc <motor_run>
		Task0_Profiler++;
 8000292:	bf00      	nop
 8000294:	e7f6      	b.n	8000284 <task0+0x4>
 8000296:	bf00      	nop
 8000298:	20000078 	.word	0x20000078

0800029c <task1>:
	}
}
void task1(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	while(1){
		Task1_Profiler++;
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <task1+0x18>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a03      	ldr	r2, [pc, #12]	@ (80002b4 <task1+0x18>)
 80002a8:	6013      	str	r3, [r2, #0]
		valve_open();
 80002aa:	f000 f831 	bl	8000310 <valve_open>
		Task1_Profiler++;
 80002ae:	bf00      	nop
 80002b0:	e7f6      	b.n	80002a0 <task1+0x4>
 80002b2:	bf00      	nop
 80002b4:	2000007c 	.word	0x2000007c

080002b8 <task2>:
	}
}
void task2(void){
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	while(1){
		Task2_Profiler++;
 80002bc:	4b02      	ldr	r3, [pc, #8]	@ (80002c8 <task2+0x10>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3301      	adds	r3, #1
 80002c2:	4a01      	ldr	r2, [pc, #4]	@ (80002c8 <task2+0x10>)
 80002c4:	6013      	str	r3, [r2, #0]
 80002c6:	e7f9      	b.n	80002bc <task2+0x4>
 80002c8:	20000080 	.word	0x20000080

080002cc <main>:
	}
}
int main(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//initialize kernel, and add threads
	uart_tx_init();
 80002d0:	f000 fa6c 	bl	80007ac <uart_tx_init>
	osKernelInit();
 80002d4:	f000 f95c 	bl	8000590 <osKernelInit>
	osKernelAddThreads(&task0, &task1, &task2);
 80002d8:	4a05      	ldr	r2, [pc, #20]	@ (80002f0 <main+0x24>)
 80002da:	4906      	ldr	r1, [pc, #24]	@ (80002f4 <main+0x28>)
 80002dc:	4806      	ldr	r0, [pc, #24]	@ (80002f8 <main+0x2c>)
 80002de:	f000 f91b 	bl	8000518 <osKernelAddThreads>
	osKernelLaunch(QUANTA);
 80002e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e6:	f000 f961 	bl	80005ac <osKernelLaunch>
 80002ea:	2300      	movs	r3, #0

}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	080002b9 	.word	0x080002b9
 80002f4:	0800029d 	.word	0x0800029d
 80002f8:	08000281 	.word	0x08000281

080002fc <motor_run>:

void motor_run(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	printf("M \n\r");
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <motor_run+0x10>)
 8000302:	f000 fbc9 	bl	8000a98 <iprintf>

}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	08001844 	.word	0x08001844

08000310 <valve_open>:

void valve_open(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	printf("valve is starting \n");
 8000314:	4802      	ldr	r0, [pc, #8]	@ (8000320 <valve_open+0x10>)
 8000316:	f000 fc27 	bl	8000b68 <puts>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	0800184c 	.word	0x0800184c

08000324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	6039      	str	r1, [r7, #0]
 800032e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000334:	2b00      	cmp	r3, #0
 8000336:	db0a      	blt.n	800034e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	b2da      	uxtb	r2, r3
 800033c:	490c      	ldr	r1, [pc, #48]	@ (8000370 <__NVIC_SetPriority+0x4c>)
 800033e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000342:	0112      	lsls	r2, r2, #4
 8000344:	b2d2      	uxtb	r2, r2
 8000346:	440b      	add	r3, r1
 8000348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800034c:	e00a      	b.n	8000364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4908      	ldr	r1, [pc, #32]	@ (8000374 <__NVIC_SetPriority+0x50>)
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	f003 030f 	and.w	r3, r3, #15
 800035a:	3b04      	subs	r3, #4
 800035c:	0112      	lsls	r2, r2, #4
 800035e:	b2d2      	uxtb	r2, r2
 8000360:	440b      	add	r3, r1
 8000362:	761a      	strb	r2, [r3, #24]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000e100 	.word	0xe000e100
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <osKernelStackInit>:
tcbType *currentPt;
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];


void osKernelStackInit(int i)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt=&TCB_STACK[i][STACKSIZE-16];
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000386:	fb02 f303 	mul.w	r3, r2, r3
 800038a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800038e:	4a60      	ldr	r2, [pc, #384]	@ (8000510 <osKernelStackInit+0x198>)
 8000390:	441a      	add	r2, r3
 8000392:	4960      	ldr	r1, [pc, #384]	@ (8000514 <osKernelStackInit+0x19c>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	/*Set BIT 21 in PSR to 1, to operate in thumb mode */
	TCB_STACK[i][STACKSIZE-1]=(1U<<24);
 800039a:	4a5d      	ldr	r2, [pc, #372]	@ (8000510 <osKernelStackInit+0x198>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003a2:	fb01 f303 	mul.w	r3, r1, r3
 80003a6:	4413      	add	r3, r2
 80003a8:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 80003ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80003b0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-3]=0xAAAAAAAA;
 80003b2:	4a57      	ldr	r2, [pc, #348]	@ (8000510 <osKernelStackInit+0x198>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ba:	fb01 f303 	mul.w	r3, r1, r3
 80003be:	4413      	add	r3, r2
 80003c0:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80003c4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003c8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4]=0xAAAAAAAA;
 80003ca:	4a51      	ldr	r2, [pc, #324]	@ (8000510 <osKernelStackInit+0x198>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003d2:	fb01 f303 	mul.w	r3, r1, r3
 80003d6:	4413      	add	r3, r2
 80003d8:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80003dc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003e0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5]=0xAAAAAAAA;
 80003e2:	4a4b      	ldr	r2, [pc, #300]	@ (8000510 <osKernelStackInit+0x198>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ea:	fb01 f303 	mul.w	r3, r1, r3
 80003ee:	4413      	add	r3, r2
 80003f0:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80003f4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003f8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6]=0xAAAAAAAA;
 80003fa:	4a45      	ldr	r2, [pc, #276]	@ (8000510 <osKernelStackInit+0x198>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000402:	fb01 f303 	mul.w	r3, r1, r3
 8000406:	4413      	add	r3, r2
 8000408:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 800040c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000410:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7]=0xAAAAAAAA;
 8000412:	4a3f      	ldr	r2, [pc, #252]	@ (8000510 <osKernelStackInit+0x198>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800041a:	fb01 f303 	mul.w	r3, r1, r3
 800041e:	4413      	add	r3, r2
 8000420:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8000424:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000428:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8]=0xAAAAAAAA;
 800042a:	4a39      	ldr	r2, [pc, #228]	@ (8000510 <osKernelStackInit+0x198>)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000432:	fb01 f303 	mul.w	r3, r1, r3
 8000436:	4413      	add	r3, r2
 8000438:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 800043c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000440:	601a      	str	r2, [r3, #0]
	//Stack frame content
	TCB_STACK[i][STACKSIZE-9]=0xAAAAAAAA;
 8000442:	4a33      	ldr	r2, [pc, #204]	@ (8000510 <osKernelStackInit+0x198>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800044a:	fb01 f303 	mul.w	r3, r1, r3
 800044e:	4413      	add	r3, r2
 8000450:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8000454:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000458:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10]=0xAAAAAAAA;
 800045a:	4a2d      	ldr	r2, [pc, #180]	@ (8000510 <osKernelStackInit+0x198>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000462:	fb01 f303 	mul.w	r3, r1, r3
 8000466:	4413      	add	r3, r2
 8000468:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 800046c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000470:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11]=0xAAAAAAAA;
 8000472:	4a27      	ldr	r2, [pc, #156]	@ (8000510 <osKernelStackInit+0x198>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800047a:	fb01 f303 	mul.w	r3, r1, r3
 800047e:	4413      	add	r3, r2
 8000480:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8000484:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000488:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12]=0xAAAAAAAA;
 800048a:	4a21      	ldr	r2, [pc, #132]	@ (8000510 <osKernelStackInit+0x198>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000492:	fb01 f303 	mul.w	r3, r1, r3
 8000496:	4413      	add	r3, r2
 8000498:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 800049c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004a0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13]=0xAAAAAAAA;
 80004a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000510 <osKernelStackInit+0x198>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004aa:	fb01 f303 	mul.w	r3, r1, r3
 80004ae:	4413      	add	r3, r2
 80004b0:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 80004b4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004b8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14]=0xAAAAAAAA;
 80004ba:	4a15      	ldr	r2, [pc, #84]	@ (8000510 <osKernelStackInit+0x198>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004c2:	fb01 f303 	mul.w	r3, r1, r3
 80004c6:	4413      	add	r3, r2
 80004c8:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80004cc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004d0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15]=0xAAAAAAAA;
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <osKernelStackInit+0x198>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004da:	fb01 f303 	mul.w	r3, r1, r3
 80004de:	4413      	add	r3, r2
 80004e0:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 80004e4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004e8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16]=0xAAAAAAAA;
 80004ea:	4a09      	ldr	r2, [pc, #36]	@ (8000510 <osKernelStackInit+0x198>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004f2:	fb01 f303 	mul.w	r3, r1, r3
 80004f6:	4413      	add	r3, r2
 80004f8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80004fc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000500:	601a      	str	r2, [r3, #0]
//r11-r5
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200000a4 	.word	0x200000a4
 8000514:	20000088 	.word	0x20000088

08000518 <osKernelAddThreads>:

uint8_t osKernelAddThreads(void(*task0)(void), void(*task1)(void), void(*task2)(void)){
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	bf00      	nop
	__disable_irq();
	//disable global interupts
	tcbs[0].nextPt=&tcbs[1];
 8000528:	4b14      	ldr	r3, [pc, #80]	@ (800057c <osKernelAddThreads+0x64>)
 800052a:	4a15      	ldr	r2, [pc, #84]	@ (8000580 <osKernelAddThreads+0x68>)
 800052c:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt=&tcbs[2];
 800052e:	4b13      	ldr	r3, [pc, #76]	@ (800057c <osKernelAddThreads+0x64>)
 8000530:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <osKernelAddThreads+0x6c>)
 8000532:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt=&tcbs[0];
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <osKernelAddThreads+0x64>)
 8000536:	4a11      	ldr	r2, [pc, #68]	@ (800057c <osKernelAddThreads+0x64>)
 8000538:	615a      	str	r2, [r3, #20]
	//circular linkedlist
	//initialize stack for thread0
	osKernelStackInit(0);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff ff1c 	bl	8000378 <osKernelStackInit>
	//Initialize PC
	TCB_STACK[0][STACKSIZE-2]=(uint32_t)(task0);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4a11      	ldr	r2, [pc, #68]	@ (8000588 <osKernelAddThreads+0x70>)
 8000544:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638
	osKernelStackInit(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f7ff ff15 	bl	8000378 <osKernelStackInit>
	TCB_STACK[1][STACKSIZE-2]=(uint32_t)(task1);
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <osKernelAddThreads+0x70>)
 8000552:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78
	osKernelStackInit(2);
 8000556:	2002      	movs	r0, #2
 8000558:	f7ff ff0e 	bl	8000378 <osKernelStackInit>
	TCB_STACK[2][STACKSIZE-2]=(uint32_t)(task2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <osKernelAddThreads+0x70>)
 8000560:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000564:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8
	currentPt=&tcbs[0];
 8000568:	4b08      	ldr	r3, [pc, #32]	@ (800058c <osKernelAddThreads+0x74>)
 800056a:	4a04      	ldr	r2, [pc, #16]	@ (800057c <osKernelAddThreads+0x64>)
 800056c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800056e:	b662      	cpsie	i
}
 8000570:	bf00      	nop
	__enable_irq();
	return 1;
 8000572:	2301      	movs	r3, #1

}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000088 	.word	0x20000088
 8000580:	20000090 	.word	0x20000090
 8000584:	20000098 	.word	0x20000098
 8000588:	200000a4 	.word	0x200000a4
 800058c:	200000a0 	.word	0x200000a0

08000590 <osKernelInit>:


void osKernelInit(void){
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	MILIS_PRESCALER=(BUS_FREQ/1000);
 8000594:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <osKernelInit+0x18>)
 8000596:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800059a:	601a      	str	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084

080005ac <osKernelLaunch>:


void osKernelLaunch(uint32_t quanta){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
//reset systick, clear cvr, load quanta, set to low priority
//enable systick, select internal clock, thne enable interrupts
SysTick->CTRL=SYSTICK_RST;
 80005b4:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <osKernelLaunch+0x40>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
SysTick->VAL=0;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <osKernelLaunch+0x40>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
SysTick->LOAD=(quanta*MILIS_PRESCALER)-1;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <osKernelLaunch+0x44>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	4a08      	ldr	r2, [pc, #32]	@ (80005ec <osKernelLaunch+0x40>)
 80005cc:	3b01      	subs	r3, #1
 80005ce:	6053      	str	r3, [r2, #4]
//# of clock cycle in 1ms
//kernel must have lowest priority
NVIC_SetPriority(SysTick_IRQn, 15);
 80005d0:	210f      	movs	r1, #15
 80005d2:	f04f 30ff 	mov.w	r0, #4294967295
 80005d6:	f7ff fea5 	bl	8000324 <__NVIC_SetPriority>
SysTick->CTRL = CTRL_CLCKSRC | CTRL_ENABLE | CTRL_TICKINT;
 80005da:	4b04      	ldr	r3, [pc, #16]	@ (80005ec <osKernelLaunch+0x40>)
 80005dc:	2207      	movs	r2, #7
 80005de:	601a      	str	r2, [r3, #0]
//enable systick interrupt, and save/load content, launch scheduler
osSchedulerLaunch();
 80005e0:	f000 f81c 	bl	800061c <osSchedulerLaunch>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	e000e010 	.word	0xe000e010
 80005f0:	20000084 	.word	0x20000084

080005f4 <SysTick_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
//stack should be unchanged during handler routine
__attribute__((naked)) void SysTick_Handler(void){
	//suspend the current thread, choose next thread
	__disable_irq();
	//only stack frame registers are saved, rest must be manuallly
	__asm("CPSID I");
 80005f8:	b672      	cpsid	i

	__asm("PUSH {R4-R11}");
 80005fa:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm("LDR R0, =currentPt");
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <SysTick_Handler+0x24>)

	__asm("LDR R1, [R0]");
 8000600:	6801      	ldr	r1, [r0, #0]
	//load r1
	__asm("STR SP, [R1]");
 8000602:	f8c1 d000 	str.w	sp, [r1]
	//store sp at r1

	__asm("LDR R1, [R1, #4]");
 8000606:	6849      	ldr	r1, [r1, #4]
	//choose next thread, load r1 from 4 bytes above r1
	__asm("STR R1, [R0]");
 8000608:	6001      	str	r1, [r0, #0]
	//store r1 at address equal r0
	__asm("LDR SP, [R1]");
 800060a:	f8d1 d000 	ldr.w	sp, [r1]
	//load cortex-m sp from address equal r1

	//restore r4-11
	__asm("POP {R4-R11}");
 800060e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm("CPSID    I");
 8000612:	b672      	cpsid	i
	//return from exception, restore stack frame

	__asm("BX   LR");
 8000614:	4770      	bx	lr
	//branch to link address
}
 8000616:	bf00      	nop
 8000618:	200000a0 	.word	0x200000a0

0800061c <osSchedulerLaunch>:

void osSchedulerLaunch(){
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	__asm("LDR R0, =currentPt");
 8000620:	4809      	ldr	r0, [pc, #36]	@ (8000648 <osSchedulerLaunch+0x2c>)
	__asm("LDR R2, [R0]");
 8000622:	6802      	ldr	r2, [r0, #0]
	//load r2 from address r0, r2=currentpt
	__asm("LDR SP, [R2]");
 8000624:	f8d2 d000 	ldr.w	sp, [r2]
	//restore non-stack frame
	__asm("POP {R4-R11}");
 8000628:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//restore r12
	__asm("POP {R12}");
 800062c:	f85d cb04 	ldr.w	ip, [sp], #4

	__asm("POP {R0-R3}");
 8000630:	bc0f      	pop	{r0, r1, r2, r3}
	//skip lr
	__asm("ADD SP, SP, #4");
 8000632:	b001      	add	sp, #4
	//create new psr
	__asm("POP {LR}");
 8000634:	f85d eb04 	ldr.w	lr, [sp], #4
	//skip psr
	__asm("ADD SP, SP, #4");
 8000638:	b001      	add	sp, #4

	__asm("CPSIE    I");
 800063a:	b662      	cpsie	i
	__asm("BX    LR");
 800063c:	4770      	bx	lr
	//return from subroutine
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	200000a0 	.word	0x200000a0

0800064c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	e00a      	b.n	8000674 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800065e:	f3af 8000 	nop.w
 8000662:	4601      	mov	r1, r0
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	60ba      	str	r2, [r7, #8]
 800066a:	b2ca      	uxtb	r2, r1
 800066c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	3301      	adds	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	429a      	cmp	r2, r3
 800067a:	dbf0      	blt.n	800065e <_read+0x12>
  }

  return len;
 800067c:	687b      	ldr	r3, [r7, #4]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	e009      	b.n	80006ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	60ba      	str	r2, [r7, #8]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f877 	bl	8000794 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	3301      	adds	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbf1      	blt.n	8000698 <_write+0x12>
  }
  return len;
 80006b4:	687b      	ldr	r3, [r7, #4]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_close>:

int _close(int file)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006e6:	605a      	str	r2, [r3, #4]
  return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <_isatty>:

int _isatty(int file)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000730:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <_sbrk+0x5c>)
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <_sbrk+0x60>)
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <_sbrk+0x64>)
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <_sbrk+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	d207      	bcs.n	8000768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000758:	f000 fb34 	bl	8000dc4 <__errno>
 800075c:	4603      	mov	r3, r0
 800075e:	220c      	movs	r2, #12
 8000760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	e009      	b.n	800077c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076e:	4b07      	ldr	r3, [pc, #28]	@ (800078c <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	4a05      	ldr	r2, [pc, #20]	@ (800078c <_sbrk+0x64>)
 8000778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077a:	68fb      	ldr	r3, [r7, #12]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20018000 	.word	0x20018000
 8000788:	00000400 	.word	0x00000400
 800078c:	20001364 	.word	0x20001364
 8000790:	200014b8 	.word	0x200014b8

08000794 <__io_putchar>:
uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

//have io write to uart
int __io_putchar(int ch){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 f84f 	bl	8000840 <uart_write>
	return ch;
 80007a2:	687b      	ldr	r3, [r7, #4]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <uart_tx_init>:
void uart_tx_init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=GPIOAEN;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <uart_tx_init+0x84>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000830 <uart_tx_init+0x84>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER&=~(1U<<4);
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <uart_tx_init+0x88>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <uart_tx_init+0x88>)
 80007c2:	f023 0310 	bic.w	r3, r3, #16
 80007c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=(1U<<5);
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <uart_tx_init+0x88>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a19      	ldr	r2, [pc, #100]	@ (8000834 <uart_tx_init+0x88>)
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]|=(1U<<8);
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <uart_tx_init+0x88>)
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a16      	ldr	r2, [pc, #88]	@ (8000834 <uart_tx_init+0x88>)
 80007da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<9);
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <uart_tx_init+0x88>)
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <uart_tx_init+0x88>)
 80007e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<10);
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <uart_tx_init+0x88>)
 80007ee:	6a1b      	ldr	r3, [r3, #32]
 80007f0:	4a10      	ldr	r2, [pc, #64]	@ (8000834 <uart_tx_init+0x88>)
 80007f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <uart_tx_init+0x88>)
 80007fa:	6a1b      	ldr	r3, [r3, #32]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <uart_tx_init+0x88>)
 80007fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000802:	6213      	str	r3, [r2, #32]
	RCC->APB1ENR|=UART2EN;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <uart_tx_init+0x84>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <uart_tx_init+0x84>)
 800080a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080e:	6413      	str	r3, [r2, #64]	@ 0x40
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000810:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000814:	4808      	ldr	r0, [pc, #32]	@ (8000838 <uart_tx_init+0x8c>)
 8000816:	f000 f82b 	bl	8000870 <uart_set_baudrate>
	USART2->CR1=CR1_TE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <uart_tx_init+0x90>)
 800081c:	2208      	movs	r2, #8
 800081e:	60da      	str	r2, [r3, #12]
	USART2->CR1|=CR1_UE;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <uart_tx_init+0x90>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	4a05      	ldr	r2, [pc, #20]	@ (800083c <uart_tx_init+0x90>)
 8000826:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800082a:	60d3      	str	r3, [r2, #12]
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000
 8000838:	00f42400 	.word	0x00f42400
 800083c:	40004400 	.word	0x40004400

08000840 <uart_write>:

static void uart_write(int ch){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	while (!(USART2->SR & SR_TXE)){}
 8000848:	bf00      	nop
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <uart_write+0x2c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <uart_write+0xa>

	USART2->DR=(ch & 0xFF);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <uart_write+0x2c>)
 800085a:	b2db      	uxtb	r3, r3
 800085c:	6053      	str	r3, [r2, #4]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40004400 	.word	0x40004400

08000870 <uart_set_baudrate>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	USART2->BRR=compute_uart_bd(periph_clk, baudrate);
 800087a:	6839      	ldr	r1, [r7, #0]
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f80b 	bl	8000898 <compute_uart_bd>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <uart_set_baudrate+0x24>)
 8000888:	609a      	str	r2, [r3, #8]
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40004400 	.word	0x40004400

08000898 <compute_uart_bd>:
uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate){
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	return (periph_clk + (baudrate / 2U)) / baudrate;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	085a      	lsrs	r2, r3, #1
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	441a      	add	r2, r3
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b0:	b29b      	uxth	r3, r3

}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c0:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ee:	f000 fa6f 	bl	8000dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f2:	f7ff fceb 	bl	80002cc <main>

080008f6 <LoopForever>:

LoopForever:
  b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   r0, =_estack
 80008f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000904:	080018c8 	.word	0x080018c8
  ldr r2, =_sbss
 8000908:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800090c:	200014b4 	.word	0x200014b4

08000910 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <std>:
 8000914:	2300      	movs	r3, #0
 8000916:	b510      	push	{r4, lr}
 8000918:	4604      	mov	r4, r0
 800091a:	e9c0 3300 	strd	r3, r3, [r0]
 800091e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000922:	6083      	str	r3, [r0, #8]
 8000924:	8181      	strh	r1, [r0, #12]
 8000926:	6643      	str	r3, [r0, #100]	@ 0x64
 8000928:	81c2      	strh	r2, [r0, #14]
 800092a:	6183      	str	r3, [r0, #24]
 800092c:	4619      	mov	r1, r3
 800092e:	2208      	movs	r2, #8
 8000930:	305c      	adds	r0, #92	@ 0x5c
 8000932:	f000 f9f9 	bl	8000d28 <memset>
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <std+0x58>)
 8000938:	6263      	str	r3, [r4, #36]	@ 0x24
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <std+0x5c>)
 800093c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <std+0x60>)
 8000940:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <std+0x64>)
 8000944:	6323      	str	r3, [r4, #48]	@ 0x30
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <std+0x68>)
 8000948:	6224      	str	r4, [r4, #32]
 800094a:	429c      	cmp	r4, r3
 800094c:	d006      	beq.n	800095c <std+0x48>
 800094e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000952:	4294      	cmp	r4, r2
 8000954:	d002      	beq.n	800095c <std+0x48>
 8000956:	33d0      	adds	r3, #208	@ 0xd0
 8000958:	429c      	cmp	r4, r3
 800095a:	d105      	bne.n	8000968 <std+0x54>
 800095c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000964:	f000 ba58 	b.w	8000e18 <__retarget_lock_init_recursive>
 8000968:	bd10      	pop	{r4, pc}
 800096a:	bf00      	nop
 800096c:	08000b79 	.word	0x08000b79
 8000970:	08000b9b 	.word	0x08000b9b
 8000974:	08000bd3 	.word	0x08000bd3
 8000978:	08000bf7 	.word	0x08000bf7
 800097c:	20001368 	.word	0x20001368

08000980 <stdio_exit_handler>:
 8000980:	4a02      	ldr	r2, [pc, #8]	@ (800098c <stdio_exit_handler+0xc>)
 8000982:	4903      	ldr	r1, [pc, #12]	@ (8000990 <stdio_exit_handler+0x10>)
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <stdio_exit_handler+0x14>)
 8000986:	f000 b869 	b.w	8000a5c <_fwalk_sglue>
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	080016b5 	.word	0x080016b5
 8000994:	20000010 	.word	0x20000010

08000998 <cleanup_stdio>:
 8000998:	6841      	ldr	r1, [r0, #4]
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <cleanup_stdio+0x34>)
 800099c:	4299      	cmp	r1, r3
 800099e:	b510      	push	{r4, lr}
 80009a0:	4604      	mov	r4, r0
 80009a2:	d001      	beq.n	80009a8 <cleanup_stdio+0x10>
 80009a4:	f000 fe86 	bl	80016b4 <_fflush_r>
 80009a8:	68a1      	ldr	r1, [r4, #8]
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <cleanup_stdio+0x38>)
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d002      	beq.n	80009b6 <cleanup_stdio+0x1e>
 80009b0:	4620      	mov	r0, r4
 80009b2:	f000 fe7f 	bl	80016b4 <_fflush_r>
 80009b6:	68e1      	ldr	r1, [r4, #12]
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <cleanup_stdio+0x3c>)
 80009ba:	4299      	cmp	r1, r3
 80009bc:	d004      	beq.n	80009c8 <cleanup_stdio+0x30>
 80009be:	4620      	mov	r0, r4
 80009c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c4:	f000 be76 	b.w	80016b4 <_fflush_r>
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	bf00      	nop
 80009cc:	20001368 	.word	0x20001368
 80009d0:	200013d0 	.word	0x200013d0
 80009d4:	20001438 	.word	0x20001438

080009d8 <global_stdio_init.part.0>:
 80009d8:	b510      	push	{r4, lr}
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <global_stdio_init.part.0+0x30>)
 80009dc:	4c0b      	ldr	r4, [pc, #44]	@ (8000a0c <global_stdio_init.part.0+0x34>)
 80009de:	4a0c      	ldr	r2, [pc, #48]	@ (8000a10 <global_stdio_init.part.0+0x38>)
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	4620      	mov	r0, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	2104      	movs	r1, #4
 80009e8:	f7ff ff94 	bl	8000914 <std>
 80009ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80009f0:	2201      	movs	r2, #1
 80009f2:	2109      	movs	r1, #9
 80009f4:	f7ff ff8e 	bl	8000914 <std>
 80009f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80009fc:	2202      	movs	r2, #2
 80009fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a02:	2112      	movs	r1, #18
 8000a04:	f7ff bf86 	b.w	8000914 <std>
 8000a08:	200014a0 	.word	0x200014a0
 8000a0c:	20001368 	.word	0x20001368
 8000a10:	08000981 	.word	0x08000981

08000a14 <__sfp_lock_acquire>:
 8000a14:	4801      	ldr	r0, [pc, #4]	@ (8000a1c <__sfp_lock_acquire+0x8>)
 8000a16:	f000 ba00 	b.w	8000e1a <__retarget_lock_acquire_recursive>
 8000a1a:	bf00      	nop
 8000a1c:	200014a9 	.word	0x200014a9

08000a20 <__sfp_lock_release>:
 8000a20:	4801      	ldr	r0, [pc, #4]	@ (8000a28 <__sfp_lock_release+0x8>)
 8000a22:	f000 b9fb 	b.w	8000e1c <__retarget_lock_release_recursive>
 8000a26:	bf00      	nop
 8000a28:	200014a9 	.word	0x200014a9

08000a2c <__sinit>:
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	4604      	mov	r4, r0
 8000a30:	f7ff fff0 	bl	8000a14 <__sfp_lock_acquire>
 8000a34:	6a23      	ldr	r3, [r4, #32]
 8000a36:	b11b      	cbz	r3, 8000a40 <__sinit+0x14>
 8000a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a3c:	f7ff bff0 	b.w	8000a20 <__sfp_lock_release>
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__sinit+0x28>)
 8000a42:	6223      	str	r3, [r4, #32]
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <__sinit+0x2c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f5      	bne.n	8000a38 <__sinit+0xc>
 8000a4c:	f7ff ffc4 	bl	80009d8 <global_stdio_init.part.0>
 8000a50:	e7f2      	b.n	8000a38 <__sinit+0xc>
 8000a52:	bf00      	nop
 8000a54:	08000999 	.word	0x08000999
 8000a58:	200014a0 	.word	0x200014a0

08000a5c <_fwalk_sglue>:
 8000a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a60:	4607      	mov	r7, r0
 8000a62:	4688      	mov	r8, r1
 8000a64:	4614      	mov	r4, r2
 8000a66:	2600      	movs	r6, #0
 8000a68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a6c:	f1b9 0901 	subs.w	r9, r9, #1
 8000a70:	d505      	bpl.n	8000a7e <_fwalk_sglue+0x22>
 8000a72:	6824      	ldr	r4, [r4, #0]
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	d1f7      	bne.n	8000a68 <_fwalk_sglue+0xc>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a7e:	89ab      	ldrh	r3, [r5, #12]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d907      	bls.n	8000a94 <_fwalk_sglue+0x38>
 8000a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	d003      	beq.n	8000a94 <_fwalk_sglue+0x38>
 8000a8c:	4629      	mov	r1, r5
 8000a8e:	4638      	mov	r0, r7
 8000a90:	47c0      	blx	r8
 8000a92:	4306      	orrs	r6, r0
 8000a94:	3568      	adds	r5, #104	@ 0x68
 8000a96:	e7e9      	b.n	8000a6c <_fwalk_sglue+0x10>

08000a98 <iprintf>:
 8000a98:	b40f      	push	{r0, r1, r2, r3}
 8000a9a:	b507      	push	{r0, r1, r2, lr}
 8000a9c:	4906      	ldr	r1, [pc, #24]	@ (8000ab8 <iprintf+0x20>)
 8000a9e:	ab04      	add	r3, sp, #16
 8000aa0:	6808      	ldr	r0, [r1, #0]
 8000aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000aa6:	6881      	ldr	r1, [r0, #8]
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	f000 fadb 	bl	8001064 <_vfiprintf_r>
 8000aae:	b003      	add	sp, #12
 8000ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr
 8000ab8:	2000000c 	.word	0x2000000c

08000abc <_puts_r>:
 8000abc:	6a03      	ldr	r3, [r0, #32]
 8000abe:	b570      	push	{r4, r5, r6, lr}
 8000ac0:	6884      	ldr	r4, [r0, #8]
 8000ac2:	4605      	mov	r5, r0
 8000ac4:	460e      	mov	r6, r1
 8000ac6:	b90b      	cbnz	r3, 8000acc <_puts_r+0x10>
 8000ac8:	f7ff ffb0 	bl	8000a2c <__sinit>
 8000acc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ace:	07db      	lsls	r3, r3, #31
 8000ad0:	d405      	bmi.n	8000ade <_puts_r+0x22>
 8000ad2:	89a3      	ldrh	r3, [r4, #12]
 8000ad4:	0598      	lsls	r0, r3, #22
 8000ad6:	d402      	bmi.n	8000ade <_puts_r+0x22>
 8000ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ada:	f000 f99e 	bl	8000e1a <__retarget_lock_acquire_recursive>
 8000ade:	89a3      	ldrh	r3, [r4, #12]
 8000ae0:	0719      	lsls	r1, r3, #28
 8000ae2:	d502      	bpl.n	8000aea <_puts_r+0x2e>
 8000ae4:	6923      	ldr	r3, [r4, #16]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d135      	bne.n	8000b56 <_puts_r+0x9a>
 8000aea:	4621      	mov	r1, r4
 8000aec:	4628      	mov	r0, r5
 8000aee:	f000 f8c5 	bl	8000c7c <__swsetup_r>
 8000af2:	b380      	cbz	r0, 8000b56 <_puts_r+0x9a>
 8000af4:	f04f 35ff 	mov.w	r5, #4294967295
 8000af8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000afa:	07da      	lsls	r2, r3, #31
 8000afc:	d405      	bmi.n	8000b0a <_puts_r+0x4e>
 8000afe:	89a3      	ldrh	r3, [r4, #12]
 8000b00:	059b      	lsls	r3, r3, #22
 8000b02:	d402      	bmi.n	8000b0a <_puts_r+0x4e>
 8000b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b06:	f000 f989 	bl	8000e1c <__retarget_lock_release_recursive>
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	da04      	bge.n	8000b1c <_puts_r+0x60>
 8000b12:	69a2      	ldr	r2, [r4, #24]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dc17      	bgt.n	8000b48 <_puts_r+0x8c>
 8000b18:	290a      	cmp	r1, #10
 8000b1a:	d015      	beq.n	8000b48 <_puts_r+0x8c>
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	6022      	str	r2, [r4, #0]
 8000b22:	7019      	strb	r1, [r3, #0]
 8000b24:	68a3      	ldr	r3, [r4, #8]
 8000b26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	60a3      	str	r3, [r4, #8]
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d1ed      	bne.n	8000b0e <_puts_r+0x52>
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da11      	bge.n	8000b5a <_puts_r+0x9e>
 8000b36:	4622      	mov	r2, r4
 8000b38:	210a      	movs	r1, #10
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f000 f85f 	bl	8000bfe <__swbuf_r>
 8000b40:	3001      	adds	r0, #1
 8000b42:	d0d7      	beq.n	8000af4 <_puts_r+0x38>
 8000b44:	250a      	movs	r5, #10
 8000b46:	e7d7      	b.n	8000af8 <_puts_r+0x3c>
 8000b48:	4622      	mov	r2, r4
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	f000 f857 	bl	8000bfe <__swbuf_r>
 8000b50:	3001      	adds	r0, #1
 8000b52:	d1e7      	bne.n	8000b24 <_puts_r+0x68>
 8000b54:	e7ce      	b.n	8000af4 <_puts_r+0x38>
 8000b56:	3e01      	subs	r6, #1
 8000b58:	e7e4      	b.n	8000b24 <_puts_r+0x68>
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	6022      	str	r2, [r4, #0]
 8000b60:	220a      	movs	r2, #10
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e7ee      	b.n	8000b44 <_puts_r+0x88>
	...

08000b68 <puts>:
 8000b68:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <puts+0xc>)
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	f7ff bfa5 	b.w	8000abc <_puts_r>
 8000b72:	bf00      	nop
 8000b74:	2000000c 	.word	0x2000000c

08000b78 <__sread>:
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	460c      	mov	r4, r1
 8000b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b80:	f000 f8fc 	bl	8000d7c <_read_r>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	bfab      	itete	ge
 8000b88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8000b8c:	181b      	addge	r3, r3, r0
 8000b8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b92:	bfac      	ite	ge
 8000b94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b96:	81a3      	strhlt	r3, [r4, #12]
 8000b98:	bd10      	pop	{r4, pc}

08000b9a <__swrite>:
 8000b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b9e:	461f      	mov	r7, r3
 8000ba0:	898b      	ldrh	r3, [r1, #12]
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	4616      	mov	r6, r2
 8000baa:	d505      	bpl.n	8000bb8 <__swrite+0x1e>
 8000bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f000 f8d0 	bl	8000d58 <_lseek_r>
 8000bb8:	89a3      	ldrh	r3, [r4, #12]
 8000bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bc2:	81a3      	strh	r3, [r4, #12]
 8000bc4:	4632      	mov	r2, r6
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4628      	mov	r0, r5
 8000bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bce:	f000 b8e7 	b.w	8000da0 <_write_r>

08000bd2 <__sseek>:
 8000bd2:	b510      	push	{r4, lr}
 8000bd4:	460c      	mov	r4, r1
 8000bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bda:	f000 f8bd 	bl	8000d58 <_lseek_r>
 8000bde:	1c43      	adds	r3, r0, #1
 8000be0:	89a3      	ldrh	r3, [r4, #12]
 8000be2:	bf15      	itete	ne
 8000be4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000be6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000bea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000bee:	81a3      	strheq	r3, [r4, #12]
 8000bf0:	bf18      	it	ne
 8000bf2:	81a3      	strhne	r3, [r4, #12]
 8000bf4:	bd10      	pop	{r4, pc}

08000bf6 <__sclose>:
 8000bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bfa:	f000 b89d 	b.w	8000d38 <_close_r>

08000bfe <__swbuf_r>:
 8000bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c00:	460e      	mov	r6, r1
 8000c02:	4614      	mov	r4, r2
 8000c04:	4605      	mov	r5, r0
 8000c06:	b118      	cbz	r0, 8000c10 <__swbuf_r+0x12>
 8000c08:	6a03      	ldr	r3, [r0, #32]
 8000c0a:	b90b      	cbnz	r3, 8000c10 <__swbuf_r+0x12>
 8000c0c:	f7ff ff0e 	bl	8000a2c <__sinit>
 8000c10:	69a3      	ldr	r3, [r4, #24]
 8000c12:	60a3      	str	r3, [r4, #8]
 8000c14:	89a3      	ldrh	r3, [r4, #12]
 8000c16:	071a      	lsls	r2, r3, #28
 8000c18:	d501      	bpl.n	8000c1e <__swbuf_r+0x20>
 8000c1a:	6923      	ldr	r3, [r4, #16]
 8000c1c:	b943      	cbnz	r3, 8000c30 <__swbuf_r+0x32>
 8000c1e:	4621      	mov	r1, r4
 8000c20:	4628      	mov	r0, r5
 8000c22:	f000 f82b 	bl	8000c7c <__swsetup_r>
 8000c26:	b118      	cbz	r0, 8000c30 <__swbuf_r+0x32>
 8000c28:	f04f 37ff 	mov.w	r7, #4294967295
 8000c2c:	4638      	mov	r0, r7
 8000c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	6922      	ldr	r2, [r4, #16]
 8000c34:	1a98      	subs	r0, r3, r2
 8000c36:	6963      	ldr	r3, [r4, #20]
 8000c38:	b2f6      	uxtb	r6, r6
 8000c3a:	4283      	cmp	r3, r0
 8000c3c:	4637      	mov	r7, r6
 8000c3e:	dc05      	bgt.n	8000c4c <__swbuf_r+0x4e>
 8000c40:	4621      	mov	r1, r4
 8000c42:	4628      	mov	r0, r5
 8000c44:	f000 fd36 	bl	80016b4 <_fflush_r>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d1ed      	bne.n	8000c28 <__swbuf_r+0x2a>
 8000c4c:	68a3      	ldr	r3, [r4, #8]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	60a3      	str	r3, [r4, #8]
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	6022      	str	r2, [r4, #0]
 8000c58:	701e      	strb	r6, [r3, #0]
 8000c5a:	6962      	ldr	r2, [r4, #20]
 8000c5c:	1c43      	adds	r3, r0, #1
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d004      	beq.n	8000c6c <__swbuf_r+0x6e>
 8000c62:	89a3      	ldrh	r3, [r4, #12]
 8000c64:	07db      	lsls	r3, r3, #31
 8000c66:	d5e1      	bpl.n	8000c2c <__swbuf_r+0x2e>
 8000c68:	2e0a      	cmp	r6, #10
 8000c6a:	d1df      	bne.n	8000c2c <__swbuf_r+0x2e>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f000 fd20 	bl	80016b4 <_fflush_r>
 8000c74:	2800      	cmp	r0, #0
 8000c76:	d0d9      	beq.n	8000c2c <__swbuf_r+0x2e>
 8000c78:	e7d6      	b.n	8000c28 <__swbuf_r+0x2a>
	...

08000c7c <__swsetup_r>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <__swsetup_r+0xa8>)
 8000c80:	4605      	mov	r5, r0
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	460c      	mov	r4, r1
 8000c86:	b118      	cbz	r0, 8000c90 <__swsetup_r+0x14>
 8000c88:	6a03      	ldr	r3, [r0, #32]
 8000c8a:	b90b      	cbnz	r3, 8000c90 <__swsetup_r+0x14>
 8000c8c:	f7ff fece 	bl	8000a2c <__sinit>
 8000c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c94:	0719      	lsls	r1, r3, #28
 8000c96:	d422      	bmi.n	8000cde <__swsetup_r+0x62>
 8000c98:	06da      	lsls	r2, r3, #27
 8000c9a:	d407      	bmi.n	8000cac <__swsetup_r+0x30>
 8000c9c:	2209      	movs	r2, #9
 8000c9e:	602a      	str	r2, [r5, #0]
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca4:	81a3      	strh	r3, [r4, #12]
 8000ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8000caa:	e033      	b.n	8000d14 <__swsetup_r+0x98>
 8000cac:	0758      	lsls	r0, r3, #29
 8000cae:	d512      	bpl.n	8000cd6 <__swsetup_r+0x5a>
 8000cb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cb2:	b141      	cbz	r1, 8000cc6 <__swsetup_r+0x4a>
 8000cb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d002      	beq.n	8000cc2 <__swsetup_r+0x46>
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f000 f8af 	bl	8000e20 <_free_r>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cc6:	89a3      	ldrh	r3, [r4, #12]
 8000cc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000ccc:	81a3      	strh	r3, [r4, #12]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	6063      	str	r3, [r4, #4]
 8000cd2:	6923      	ldr	r3, [r4, #16]
 8000cd4:	6023      	str	r3, [r4, #0]
 8000cd6:	89a3      	ldrh	r3, [r4, #12]
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	81a3      	strh	r3, [r4, #12]
 8000cde:	6923      	ldr	r3, [r4, #16]
 8000ce0:	b94b      	cbnz	r3, 8000cf6 <__swsetup_r+0x7a>
 8000ce2:	89a3      	ldrh	r3, [r4, #12]
 8000ce4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cec:	d003      	beq.n	8000cf6 <__swsetup_r+0x7a>
 8000cee:	4621      	mov	r1, r4
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f000 fd2d 	bl	8001750 <__smakebuf_r>
 8000cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cfa:	f013 0201 	ands.w	r2, r3, #1
 8000cfe:	d00a      	beq.n	8000d16 <__swsetup_r+0x9a>
 8000d00:	2200      	movs	r2, #0
 8000d02:	60a2      	str	r2, [r4, #8]
 8000d04:	6962      	ldr	r2, [r4, #20]
 8000d06:	4252      	negs	r2, r2
 8000d08:	61a2      	str	r2, [r4, #24]
 8000d0a:	6922      	ldr	r2, [r4, #16]
 8000d0c:	b942      	cbnz	r2, 8000d20 <__swsetup_r+0xa4>
 8000d0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d12:	d1c5      	bne.n	8000ca0 <__swsetup_r+0x24>
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	0799      	lsls	r1, r3, #30
 8000d18:	bf58      	it	pl
 8000d1a:	6962      	ldrpl	r2, [r4, #20]
 8000d1c:	60a2      	str	r2, [r4, #8]
 8000d1e:	e7f4      	b.n	8000d0a <__swsetup_r+0x8e>
 8000d20:	2000      	movs	r0, #0
 8000d22:	e7f7      	b.n	8000d14 <__swsetup_r+0x98>
 8000d24:	2000000c 	.word	0x2000000c

08000d28 <memset>:
 8000d28:	4402      	add	r2, r0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d100      	bne.n	8000d32 <memset+0xa>
 8000d30:	4770      	bx	lr
 8000d32:	f803 1b01 	strb.w	r1, [r3], #1
 8000d36:	e7f9      	b.n	8000d2c <memset+0x4>

08000d38 <_close_r>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4d06      	ldr	r5, [pc, #24]	@ (8000d54 <_close_r+0x1c>)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4608      	mov	r0, r1
 8000d42:	602b      	str	r3, [r5, #0]
 8000d44:	f7ff fcbb 	bl	80006be <_close>
 8000d48:	1c43      	adds	r3, r0, #1
 8000d4a:	d102      	bne.n	8000d52 <_close_r+0x1a>
 8000d4c:	682b      	ldr	r3, [r5, #0]
 8000d4e:	b103      	cbz	r3, 8000d52 <_close_r+0x1a>
 8000d50:	6023      	str	r3, [r4, #0]
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
 8000d54:	200014a4 	.word	0x200014a4

08000d58 <_lseek_r>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	4d07      	ldr	r5, [pc, #28]	@ (8000d78 <_lseek_r+0x20>)
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	4611      	mov	r1, r2
 8000d62:	2200      	movs	r2, #0
 8000d64:	602a      	str	r2, [r5, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	f7ff fcd0 	bl	800070c <_lseek>
 8000d6c:	1c43      	adds	r3, r0, #1
 8000d6e:	d102      	bne.n	8000d76 <_lseek_r+0x1e>
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	b103      	cbz	r3, 8000d76 <_lseek_r+0x1e>
 8000d74:	6023      	str	r3, [r4, #0]
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
 8000d78:	200014a4 	.word	0x200014a4

08000d7c <_read_r>:
 8000d7c:	b538      	push	{r3, r4, r5, lr}
 8000d7e:	4d07      	ldr	r5, [pc, #28]	@ (8000d9c <_read_r+0x20>)
 8000d80:	4604      	mov	r4, r0
 8000d82:	4608      	mov	r0, r1
 8000d84:	4611      	mov	r1, r2
 8000d86:	2200      	movs	r2, #0
 8000d88:	602a      	str	r2, [r5, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f7ff fc5e 	bl	800064c <_read>
 8000d90:	1c43      	adds	r3, r0, #1
 8000d92:	d102      	bne.n	8000d9a <_read_r+0x1e>
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	b103      	cbz	r3, 8000d9a <_read_r+0x1e>
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	bd38      	pop	{r3, r4, r5, pc}
 8000d9c:	200014a4 	.word	0x200014a4

08000da0 <_write_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4d07      	ldr	r5, [pc, #28]	@ (8000dc0 <_write_r+0x20>)
 8000da4:	4604      	mov	r4, r0
 8000da6:	4608      	mov	r0, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	602a      	str	r2, [r5, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	f7ff fc69 	bl	8000686 <_write>
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	d102      	bne.n	8000dbe <_write_r+0x1e>
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	b103      	cbz	r3, 8000dbe <_write_r+0x1e>
 8000dbc:	6023      	str	r3, [r4, #0]
 8000dbe:	bd38      	pop	{r3, r4, r5, pc}
 8000dc0:	200014a4 	.word	0x200014a4

08000dc4 <__errno>:
 8000dc4:	4b01      	ldr	r3, [pc, #4]	@ (8000dcc <__errno+0x8>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000000c 	.word	0x2000000c

08000dd0 <__libc_init_array>:
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8000e08 <__libc_init_array+0x38>)
 8000dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8000e0c <__libc_init_array+0x3c>)
 8000dd6:	1b64      	subs	r4, r4, r5
 8000dd8:	10a4      	asrs	r4, r4, #2
 8000dda:	2600      	movs	r6, #0
 8000ddc:	42a6      	cmp	r6, r4
 8000dde:	d109      	bne.n	8000df4 <__libc_init_array+0x24>
 8000de0:	4d0b      	ldr	r5, [pc, #44]	@ (8000e10 <__libc_init_array+0x40>)
 8000de2:	4c0c      	ldr	r4, [pc, #48]	@ (8000e14 <__libc_init_array+0x44>)
 8000de4:	f000 fd22 	bl	800182c <_init>
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	10a4      	asrs	r4, r4, #2
 8000dec:	2600      	movs	r6, #0
 8000dee:	42a6      	cmp	r6, r4
 8000df0:	d105      	bne.n	8000dfe <__libc_init_array+0x2e>
 8000df2:	bd70      	pop	{r4, r5, r6, pc}
 8000df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df8:	4798      	blx	r3
 8000dfa:	3601      	adds	r6, #1
 8000dfc:	e7ee      	b.n	8000ddc <__libc_init_array+0xc>
 8000dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e02:	4798      	blx	r3
 8000e04:	3601      	adds	r6, #1
 8000e06:	e7f2      	b.n	8000dee <__libc_init_array+0x1e>
 8000e08:	080018c0 	.word	0x080018c0
 8000e0c:	080018c0 	.word	0x080018c0
 8000e10:	080018c0 	.word	0x080018c0
 8000e14:	080018c4 	.word	0x080018c4

08000e18 <__retarget_lock_init_recursive>:
 8000e18:	4770      	bx	lr

08000e1a <__retarget_lock_acquire_recursive>:
 8000e1a:	4770      	bx	lr

08000e1c <__retarget_lock_release_recursive>:
 8000e1c:	4770      	bx	lr
	...

08000e20 <_free_r>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4605      	mov	r5, r0
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d041      	beq.n	8000eac <_free_r+0x8c>
 8000e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e2c:	1f0c      	subs	r4, r1, #4
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bfb8      	it	lt
 8000e32:	18e4      	addlt	r4, r4, r3
 8000e34:	f000 f8e0 	bl	8000ff8 <__malloc_lock>
 8000e38:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <_free_r+0x90>)
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	b933      	cbnz	r3, 8000e4c <_free_r+0x2c>
 8000e3e:	6063      	str	r3, [r4, #4]
 8000e40:	6014      	str	r4, [r2, #0]
 8000e42:	4628      	mov	r0, r5
 8000e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e48:	f000 b8dc 	b.w	8001004 <__malloc_unlock>
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <_free_r+0x42>
 8000e50:	6820      	ldr	r0, [r4, #0]
 8000e52:	1821      	adds	r1, r4, r0
 8000e54:	428b      	cmp	r3, r1
 8000e56:	bf01      	itttt	eq
 8000e58:	6819      	ldreq	r1, [r3, #0]
 8000e5a:	685b      	ldreq	r3, [r3, #4]
 8000e5c:	1809      	addeq	r1, r1, r0
 8000e5e:	6021      	streq	r1, [r4, #0]
 8000e60:	e7ed      	b.n	8000e3e <_free_r+0x1e>
 8000e62:	461a      	mov	r2, r3
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	b10b      	cbz	r3, 8000e6c <_free_r+0x4c>
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d9fa      	bls.n	8000e62 <_free_r+0x42>
 8000e6c:	6811      	ldr	r1, [r2, #0]
 8000e6e:	1850      	adds	r0, r2, r1
 8000e70:	42a0      	cmp	r0, r4
 8000e72:	d10b      	bne.n	8000e8c <_free_r+0x6c>
 8000e74:	6820      	ldr	r0, [r4, #0]
 8000e76:	4401      	add	r1, r0
 8000e78:	1850      	adds	r0, r2, r1
 8000e7a:	4283      	cmp	r3, r0
 8000e7c:	6011      	str	r1, [r2, #0]
 8000e7e:	d1e0      	bne.n	8000e42 <_free_r+0x22>
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	6053      	str	r3, [r2, #4]
 8000e86:	4408      	add	r0, r1
 8000e88:	6010      	str	r0, [r2, #0]
 8000e8a:	e7da      	b.n	8000e42 <_free_r+0x22>
 8000e8c:	d902      	bls.n	8000e94 <_free_r+0x74>
 8000e8e:	230c      	movs	r3, #12
 8000e90:	602b      	str	r3, [r5, #0]
 8000e92:	e7d6      	b.n	8000e42 <_free_r+0x22>
 8000e94:	6820      	ldr	r0, [r4, #0]
 8000e96:	1821      	adds	r1, r4, r0
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf04      	itt	eq
 8000e9c:	6819      	ldreq	r1, [r3, #0]
 8000e9e:	685b      	ldreq	r3, [r3, #4]
 8000ea0:	6063      	str	r3, [r4, #4]
 8000ea2:	bf04      	itt	eq
 8000ea4:	1809      	addeq	r1, r1, r0
 8000ea6:	6021      	streq	r1, [r4, #0]
 8000ea8:	6054      	str	r4, [r2, #4]
 8000eaa:	e7ca      	b.n	8000e42 <_free_r+0x22>
 8000eac:	bd38      	pop	{r3, r4, r5, pc}
 8000eae:	bf00      	nop
 8000eb0:	200014b0 	.word	0x200014b0

08000eb4 <sbrk_aligned>:
 8000eb4:	b570      	push	{r4, r5, r6, lr}
 8000eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8000ef4 <sbrk_aligned+0x40>)
 8000eb8:	460c      	mov	r4, r1
 8000eba:	6831      	ldr	r1, [r6, #0]
 8000ebc:	4605      	mov	r5, r0
 8000ebe:	b911      	cbnz	r1, 8000ec6 <sbrk_aligned+0x12>
 8000ec0:	f000 fca4 	bl	800180c <_sbrk_r>
 8000ec4:	6030      	str	r0, [r6, #0]
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	4628      	mov	r0, r5
 8000eca:	f000 fc9f 	bl	800180c <_sbrk_r>
 8000ece:	1c43      	adds	r3, r0, #1
 8000ed0:	d103      	bne.n	8000eda <sbrk_aligned+0x26>
 8000ed2:	f04f 34ff 	mov.w	r4, #4294967295
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	1cc4      	adds	r4, r0, #3
 8000edc:	f024 0403 	bic.w	r4, r4, #3
 8000ee0:	42a0      	cmp	r0, r4
 8000ee2:	d0f8      	beq.n	8000ed6 <sbrk_aligned+0x22>
 8000ee4:	1a21      	subs	r1, r4, r0
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	f000 fc90 	bl	800180c <_sbrk_r>
 8000eec:	3001      	adds	r0, #1
 8000eee:	d1f2      	bne.n	8000ed6 <sbrk_aligned+0x22>
 8000ef0:	e7ef      	b.n	8000ed2 <sbrk_aligned+0x1e>
 8000ef2:	bf00      	nop
 8000ef4:	200014ac 	.word	0x200014ac

08000ef8 <_malloc_r>:
 8000ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000efc:	1ccd      	adds	r5, r1, #3
 8000efe:	f025 0503 	bic.w	r5, r5, #3
 8000f02:	3508      	adds	r5, #8
 8000f04:	2d0c      	cmp	r5, #12
 8000f06:	bf38      	it	cc
 8000f08:	250c      	movcc	r5, #12
 8000f0a:	2d00      	cmp	r5, #0
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	db01      	blt.n	8000f14 <_malloc_r+0x1c>
 8000f10:	42a9      	cmp	r1, r5
 8000f12:	d904      	bls.n	8000f1e <_malloc_r+0x26>
 8000f14:	230c      	movs	r3, #12
 8000f16:	6033      	str	r3, [r6, #0]
 8000f18:	2000      	movs	r0, #0
 8000f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ff4 <_malloc_r+0xfc>
 8000f22:	f000 f869 	bl	8000ff8 <__malloc_lock>
 8000f26:	f8d8 3000 	ldr.w	r3, [r8]
 8000f2a:	461c      	mov	r4, r3
 8000f2c:	bb44      	cbnz	r4, 8000f80 <_malloc_r+0x88>
 8000f2e:	4629      	mov	r1, r5
 8000f30:	4630      	mov	r0, r6
 8000f32:	f7ff ffbf 	bl	8000eb4 <sbrk_aligned>
 8000f36:	1c43      	adds	r3, r0, #1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	d158      	bne.n	8000fee <_malloc_r+0xf6>
 8000f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8000f40:	4627      	mov	r7, r4
 8000f42:	2f00      	cmp	r7, #0
 8000f44:	d143      	bne.n	8000fce <_malloc_r+0xd6>
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	d04b      	beq.n	8000fe2 <_malloc_r+0xea>
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	4630      	mov	r0, r6
 8000f50:	eb04 0903 	add.w	r9, r4, r3
 8000f54:	f000 fc5a 	bl	800180c <_sbrk_r>
 8000f58:	4581      	cmp	r9, r0
 8000f5a:	d142      	bne.n	8000fe2 <_malloc_r+0xea>
 8000f5c:	6821      	ldr	r1, [r4, #0]
 8000f5e:	1a6d      	subs	r5, r5, r1
 8000f60:	4629      	mov	r1, r5
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff ffa6 	bl	8000eb4 <sbrk_aligned>
 8000f68:	3001      	adds	r0, #1
 8000f6a:	d03a      	beq.n	8000fe2 <_malloc_r+0xea>
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	442b      	add	r3, r5
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	f8d8 3000 	ldr.w	r3, [r8]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	bb62      	cbnz	r2, 8000fd4 <_malloc_r+0xdc>
 8000f7a:	f8c8 7000 	str.w	r7, [r8]
 8000f7e:	e00f      	b.n	8000fa0 <_malloc_r+0xa8>
 8000f80:	6822      	ldr	r2, [r4, #0]
 8000f82:	1b52      	subs	r2, r2, r5
 8000f84:	d420      	bmi.n	8000fc8 <_malloc_r+0xd0>
 8000f86:	2a0b      	cmp	r2, #11
 8000f88:	d917      	bls.n	8000fba <_malloc_r+0xc2>
 8000f8a:	1961      	adds	r1, r4, r5
 8000f8c:	42a3      	cmp	r3, r4
 8000f8e:	6025      	str	r5, [r4, #0]
 8000f90:	bf18      	it	ne
 8000f92:	6059      	strne	r1, [r3, #4]
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	bf08      	it	eq
 8000f98:	f8c8 1000 	streq.w	r1, [r8]
 8000f9c:	5162      	str	r2, [r4, r5]
 8000f9e:	604b      	str	r3, [r1, #4]
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	f000 f82f 	bl	8001004 <__malloc_unlock>
 8000fa6:	f104 000b 	add.w	r0, r4, #11
 8000faa:	1d23      	adds	r3, r4, #4
 8000fac:	f020 0007 	bic.w	r0, r0, #7
 8000fb0:	1ac2      	subs	r2, r0, r3
 8000fb2:	bf1c      	itt	ne
 8000fb4:	1a1b      	subne	r3, r3, r0
 8000fb6:	50a3      	strne	r3, [r4, r2]
 8000fb8:	e7af      	b.n	8000f1a <_malloc_r+0x22>
 8000fba:	6862      	ldr	r2, [r4, #4]
 8000fbc:	42a3      	cmp	r3, r4
 8000fbe:	bf0c      	ite	eq
 8000fc0:	f8c8 2000 	streq.w	r2, [r8]
 8000fc4:	605a      	strne	r2, [r3, #4]
 8000fc6:	e7eb      	b.n	8000fa0 <_malloc_r+0xa8>
 8000fc8:	4623      	mov	r3, r4
 8000fca:	6864      	ldr	r4, [r4, #4]
 8000fcc:	e7ae      	b.n	8000f2c <_malloc_r+0x34>
 8000fce:	463c      	mov	r4, r7
 8000fd0:	687f      	ldr	r7, [r7, #4]
 8000fd2:	e7b6      	b.n	8000f42 <_malloc_r+0x4a>
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d1fb      	bne.n	8000fd4 <_malloc_r+0xdc>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	6053      	str	r3, [r2, #4]
 8000fe0:	e7de      	b.n	8000fa0 <_malloc_r+0xa8>
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	6033      	str	r3, [r6, #0]
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	f000 f80c 	bl	8001004 <__malloc_unlock>
 8000fec:	e794      	b.n	8000f18 <_malloc_r+0x20>
 8000fee:	6005      	str	r5, [r0, #0]
 8000ff0:	e7d6      	b.n	8000fa0 <_malloc_r+0xa8>
 8000ff2:	bf00      	nop
 8000ff4:	200014b0 	.word	0x200014b0

08000ff8 <__malloc_lock>:
 8000ff8:	4801      	ldr	r0, [pc, #4]	@ (8001000 <__malloc_lock+0x8>)
 8000ffa:	f7ff bf0e 	b.w	8000e1a <__retarget_lock_acquire_recursive>
 8000ffe:	bf00      	nop
 8001000:	200014a8 	.word	0x200014a8

08001004 <__malloc_unlock>:
 8001004:	4801      	ldr	r0, [pc, #4]	@ (800100c <__malloc_unlock+0x8>)
 8001006:	f7ff bf09 	b.w	8000e1c <__retarget_lock_release_recursive>
 800100a:	bf00      	nop
 800100c:	200014a8 	.word	0x200014a8

08001010 <__sfputc_r>:
 8001010:	6893      	ldr	r3, [r2, #8]
 8001012:	3b01      	subs	r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	b410      	push	{r4}
 8001018:	6093      	str	r3, [r2, #8]
 800101a:	da08      	bge.n	800102e <__sfputc_r+0x1e>
 800101c:	6994      	ldr	r4, [r2, #24]
 800101e:	42a3      	cmp	r3, r4
 8001020:	db01      	blt.n	8001026 <__sfputc_r+0x16>
 8001022:	290a      	cmp	r1, #10
 8001024:	d103      	bne.n	800102e <__sfputc_r+0x1e>
 8001026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800102a:	f7ff bde8 	b.w	8000bfe <__swbuf_r>
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	1c58      	adds	r0, r3, #1
 8001032:	6010      	str	r0, [r2, #0]
 8001034:	7019      	strb	r1, [r3, #0]
 8001036:	4608      	mov	r0, r1
 8001038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800103c:	4770      	bx	lr

0800103e <__sfputs_r>:
 800103e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001040:	4606      	mov	r6, r0
 8001042:	460f      	mov	r7, r1
 8001044:	4614      	mov	r4, r2
 8001046:	18d5      	adds	r5, r2, r3
 8001048:	42ac      	cmp	r4, r5
 800104a:	d101      	bne.n	8001050 <__sfputs_r+0x12>
 800104c:	2000      	movs	r0, #0
 800104e:	e007      	b.n	8001060 <__sfputs_r+0x22>
 8001050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001054:	463a      	mov	r2, r7
 8001056:	4630      	mov	r0, r6
 8001058:	f7ff ffda 	bl	8001010 <__sfputc_r>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d1f3      	bne.n	8001048 <__sfputs_r+0xa>
 8001060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001064 <_vfiprintf_r>:
 8001064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001068:	460d      	mov	r5, r1
 800106a:	b09d      	sub	sp, #116	@ 0x74
 800106c:	4614      	mov	r4, r2
 800106e:	4698      	mov	r8, r3
 8001070:	4606      	mov	r6, r0
 8001072:	b118      	cbz	r0, 800107c <_vfiprintf_r+0x18>
 8001074:	6a03      	ldr	r3, [r0, #32]
 8001076:	b90b      	cbnz	r3, 800107c <_vfiprintf_r+0x18>
 8001078:	f7ff fcd8 	bl	8000a2c <__sinit>
 800107c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800107e:	07d9      	lsls	r1, r3, #31
 8001080:	d405      	bmi.n	800108e <_vfiprintf_r+0x2a>
 8001082:	89ab      	ldrh	r3, [r5, #12]
 8001084:	059a      	lsls	r2, r3, #22
 8001086:	d402      	bmi.n	800108e <_vfiprintf_r+0x2a>
 8001088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800108a:	f7ff fec6 	bl	8000e1a <__retarget_lock_acquire_recursive>
 800108e:	89ab      	ldrh	r3, [r5, #12]
 8001090:	071b      	lsls	r3, r3, #28
 8001092:	d501      	bpl.n	8001098 <_vfiprintf_r+0x34>
 8001094:	692b      	ldr	r3, [r5, #16]
 8001096:	b99b      	cbnz	r3, 80010c0 <_vfiprintf_r+0x5c>
 8001098:	4629      	mov	r1, r5
 800109a:	4630      	mov	r0, r6
 800109c:	f7ff fdee 	bl	8000c7c <__swsetup_r>
 80010a0:	b170      	cbz	r0, 80010c0 <_vfiprintf_r+0x5c>
 80010a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010a4:	07dc      	lsls	r4, r3, #31
 80010a6:	d504      	bpl.n	80010b2 <_vfiprintf_r+0x4e>
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	b01d      	add	sp, #116	@ 0x74
 80010ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b2:	89ab      	ldrh	r3, [r5, #12]
 80010b4:	0598      	lsls	r0, r3, #22
 80010b6:	d4f7      	bmi.n	80010a8 <_vfiprintf_r+0x44>
 80010b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010ba:	f7ff feaf 	bl	8000e1c <__retarget_lock_release_recursive>
 80010be:	e7f3      	b.n	80010a8 <_vfiprintf_r+0x44>
 80010c0:	2300      	movs	r3, #0
 80010c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80010c4:	2320      	movs	r3, #32
 80010c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80010ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80010ce:	2330      	movs	r3, #48	@ 0x30
 80010d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001280 <_vfiprintf_r+0x21c>
 80010d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80010d8:	f04f 0901 	mov.w	r9, #1
 80010dc:	4623      	mov	r3, r4
 80010de:	469a      	mov	sl, r3
 80010e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010e4:	b10a      	cbz	r2, 80010ea <_vfiprintf_r+0x86>
 80010e6:	2a25      	cmp	r2, #37	@ 0x25
 80010e8:	d1f9      	bne.n	80010de <_vfiprintf_r+0x7a>
 80010ea:	ebba 0b04 	subs.w	fp, sl, r4
 80010ee:	d00b      	beq.n	8001108 <_vfiprintf_r+0xa4>
 80010f0:	465b      	mov	r3, fp
 80010f2:	4622      	mov	r2, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	4630      	mov	r0, r6
 80010f8:	f7ff ffa1 	bl	800103e <__sfputs_r>
 80010fc:	3001      	adds	r0, #1
 80010fe:	f000 80a7 	beq.w	8001250 <_vfiprintf_r+0x1ec>
 8001102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001104:	445a      	add	r2, fp
 8001106:	9209      	str	r2, [sp, #36]	@ 0x24
 8001108:	f89a 3000 	ldrb.w	r3, [sl]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 809f 	beq.w	8001250 <_vfiprintf_r+0x1ec>
 8001112:	2300      	movs	r3, #0
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800111c:	f10a 0a01 	add.w	sl, sl, #1
 8001120:	9304      	str	r3, [sp, #16]
 8001122:	9307      	str	r3, [sp, #28]
 8001124:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001128:	931a      	str	r3, [sp, #104]	@ 0x68
 800112a:	4654      	mov	r4, sl
 800112c:	2205      	movs	r2, #5
 800112e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001132:	4853      	ldr	r0, [pc, #332]	@ (8001280 <_vfiprintf_r+0x21c>)
 8001134:	f7ff f854 	bl	80001e0 <memchr>
 8001138:	9a04      	ldr	r2, [sp, #16]
 800113a:	b9d8      	cbnz	r0, 8001174 <_vfiprintf_r+0x110>
 800113c:	06d1      	lsls	r1, r2, #27
 800113e:	bf44      	itt	mi
 8001140:	2320      	movmi	r3, #32
 8001142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001146:	0713      	lsls	r3, r2, #28
 8001148:	bf44      	itt	mi
 800114a:	232b      	movmi	r3, #43	@ 0x2b
 800114c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001150:	f89a 3000 	ldrb.w	r3, [sl]
 8001154:	2b2a      	cmp	r3, #42	@ 0x2a
 8001156:	d015      	beq.n	8001184 <_vfiprintf_r+0x120>
 8001158:	9a07      	ldr	r2, [sp, #28]
 800115a:	4654      	mov	r4, sl
 800115c:	2000      	movs	r0, #0
 800115e:	f04f 0c0a 	mov.w	ip, #10
 8001162:	4621      	mov	r1, r4
 8001164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001168:	3b30      	subs	r3, #48	@ 0x30
 800116a:	2b09      	cmp	r3, #9
 800116c:	d94b      	bls.n	8001206 <_vfiprintf_r+0x1a2>
 800116e:	b1b0      	cbz	r0, 800119e <_vfiprintf_r+0x13a>
 8001170:	9207      	str	r2, [sp, #28]
 8001172:	e014      	b.n	800119e <_vfiprintf_r+0x13a>
 8001174:	eba0 0308 	sub.w	r3, r0, r8
 8001178:	fa09 f303 	lsl.w	r3, r9, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	9304      	str	r3, [sp, #16]
 8001180:	46a2      	mov	sl, r4
 8001182:	e7d2      	b.n	800112a <_vfiprintf_r+0xc6>
 8001184:	9b03      	ldr	r3, [sp, #12]
 8001186:	1d19      	adds	r1, r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	9103      	str	r1, [sp, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	bfbb      	ittet	lt
 8001190:	425b      	neglt	r3, r3
 8001192:	f042 0202 	orrlt.w	r2, r2, #2
 8001196:	9307      	strge	r3, [sp, #28]
 8001198:	9307      	strlt	r3, [sp, #28]
 800119a:	bfb8      	it	lt
 800119c:	9204      	strlt	r2, [sp, #16]
 800119e:	7823      	ldrb	r3, [r4, #0]
 80011a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80011a2:	d10a      	bne.n	80011ba <_vfiprintf_r+0x156>
 80011a4:	7863      	ldrb	r3, [r4, #1]
 80011a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80011a8:	d132      	bne.n	8001210 <_vfiprintf_r+0x1ac>
 80011aa:	9b03      	ldr	r3, [sp, #12]
 80011ac:	1d1a      	adds	r2, r3, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	9203      	str	r2, [sp, #12]
 80011b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80011b6:	3402      	adds	r4, #2
 80011b8:	9305      	str	r3, [sp, #20]
 80011ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001290 <_vfiprintf_r+0x22c>
 80011be:	7821      	ldrb	r1, [r4, #0]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4650      	mov	r0, sl
 80011c4:	f7ff f80c 	bl	80001e0 <memchr>
 80011c8:	b138      	cbz	r0, 80011da <_vfiprintf_r+0x176>
 80011ca:	9b04      	ldr	r3, [sp, #16]
 80011cc:	eba0 000a 	sub.w	r0, r0, sl
 80011d0:	2240      	movs	r2, #64	@ 0x40
 80011d2:	4082      	lsls	r2, r0
 80011d4:	4313      	orrs	r3, r2
 80011d6:	3401      	adds	r4, #1
 80011d8:	9304      	str	r3, [sp, #16]
 80011da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011de:	4829      	ldr	r0, [pc, #164]	@ (8001284 <_vfiprintf_r+0x220>)
 80011e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80011e4:	2206      	movs	r2, #6
 80011e6:	f7fe fffb 	bl	80001e0 <memchr>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d03f      	beq.n	800126e <_vfiprintf_r+0x20a>
 80011ee:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <_vfiprintf_r+0x224>)
 80011f0:	bb1b      	cbnz	r3, 800123a <_vfiprintf_r+0x1d6>
 80011f2:	9b03      	ldr	r3, [sp, #12]
 80011f4:	3307      	adds	r3, #7
 80011f6:	f023 0307 	bic.w	r3, r3, #7
 80011fa:	3308      	adds	r3, #8
 80011fc:	9303      	str	r3, [sp, #12]
 80011fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001200:	443b      	add	r3, r7
 8001202:	9309      	str	r3, [sp, #36]	@ 0x24
 8001204:	e76a      	b.n	80010dc <_vfiprintf_r+0x78>
 8001206:	fb0c 3202 	mla	r2, ip, r2, r3
 800120a:	460c      	mov	r4, r1
 800120c:	2001      	movs	r0, #1
 800120e:	e7a8      	b.n	8001162 <_vfiprintf_r+0xfe>
 8001210:	2300      	movs	r3, #0
 8001212:	3401      	adds	r4, #1
 8001214:	9305      	str	r3, [sp, #20]
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0c0a 	mov.w	ip, #10
 800121c:	4620      	mov	r0, r4
 800121e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001222:	3a30      	subs	r2, #48	@ 0x30
 8001224:	2a09      	cmp	r2, #9
 8001226:	d903      	bls.n	8001230 <_vfiprintf_r+0x1cc>
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0c6      	beq.n	80011ba <_vfiprintf_r+0x156>
 800122c:	9105      	str	r1, [sp, #20]
 800122e:	e7c4      	b.n	80011ba <_vfiprintf_r+0x156>
 8001230:	fb0c 2101 	mla	r1, ip, r1, r2
 8001234:	4604      	mov	r4, r0
 8001236:	2301      	movs	r3, #1
 8001238:	e7f0      	b.n	800121c <_vfiprintf_r+0x1b8>
 800123a:	ab03      	add	r3, sp, #12
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	462a      	mov	r2, r5
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <_vfiprintf_r+0x228>)
 8001242:	a904      	add	r1, sp, #16
 8001244:	4630      	mov	r0, r6
 8001246:	f3af 8000 	nop.w
 800124a:	4607      	mov	r7, r0
 800124c:	1c78      	adds	r0, r7, #1
 800124e:	d1d6      	bne.n	80011fe <_vfiprintf_r+0x19a>
 8001250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001252:	07d9      	lsls	r1, r3, #31
 8001254:	d405      	bmi.n	8001262 <_vfiprintf_r+0x1fe>
 8001256:	89ab      	ldrh	r3, [r5, #12]
 8001258:	059a      	lsls	r2, r3, #22
 800125a:	d402      	bmi.n	8001262 <_vfiprintf_r+0x1fe>
 800125c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800125e:	f7ff fddd 	bl	8000e1c <__retarget_lock_release_recursive>
 8001262:	89ab      	ldrh	r3, [r5, #12]
 8001264:	065b      	lsls	r3, r3, #25
 8001266:	f53f af1f 	bmi.w	80010a8 <_vfiprintf_r+0x44>
 800126a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800126c:	e71e      	b.n	80010ac <_vfiprintf_r+0x48>
 800126e:	ab03      	add	r3, sp, #12
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	462a      	mov	r2, r5
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <_vfiprintf_r+0x228>)
 8001276:	a904      	add	r1, sp, #16
 8001278:	4630      	mov	r0, r6
 800127a:	f000 f879 	bl	8001370 <_printf_i>
 800127e:	e7e4      	b.n	800124a <_vfiprintf_r+0x1e6>
 8001280:	08001884 	.word	0x08001884
 8001284:	0800188e 	.word	0x0800188e
 8001288:	00000000 	.word	0x00000000
 800128c:	0800103f 	.word	0x0800103f
 8001290:	0800188a 	.word	0x0800188a

08001294 <_printf_common>:
 8001294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001298:	4616      	mov	r6, r2
 800129a:	4698      	mov	r8, r3
 800129c:	688a      	ldr	r2, [r1, #8]
 800129e:	690b      	ldr	r3, [r1, #16]
 80012a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bfb8      	it	lt
 80012a8:	4613      	movlt	r3, r2
 80012aa:	6033      	str	r3, [r6, #0]
 80012ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80012b0:	4607      	mov	r7, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	b10a      	cbz	r2, 80012ba <_printf_common+0x26>
 80012b6:	3301      	adds	r3, #1
 80012b8:	6033      	str	r3, [r6, #0]
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	0699      	lsls	r1, r3, #26
 80012be:	bf42      	ittt	mi
 80012c0:	6833      	ldrmi	r3, [r6, #0]
 80012c2:	3302      	addmi	r3, #2
 80012c4:	6033      	strmi	r3, [r6, #0]
 80012c6:	6825      	ldr	r5, [r4, #0]
 80012c8:	f015 0506 	ands.w	r5, r5, #6
 80012cc:	d106      	bne.n	80012dc <_printf_common+0x48>
 80012ce:	f104 0a19 	add.w	sl, r4, #25
 80012d2:	68e3      	ldr	r3, [r4, #12]
 80012d4:	6832      	ldr	r2, [r6, #0]
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	42ab      	cmp	r3, r5
 80012da:	dc26      	bgt.n	800132a <_printf_common+0x96>
 80012dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80012e0:	6822      	ldr	r2, [r4, #0]
 80012e2:	3b00      	subs	r3, #0
 80012e4:	bf18      	it	ne
 80012e6:	2301      	movne	r3, #1
 80012e8:	0692      	lsls	r2, r2, #26
 80012ea:	d42b      	bmi.n	8001344 <_printf_common+0xb0>
 80012ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80012f0:	4641      	mov	r1, r8
 80012f2:	4638      	mov	r0, r7
 80012f4:	47c8      	blx	r9
 80012f6:	3001      	adds	r0, #1
 80012f8:	d01e      	beq.n	8001338 <_printf_common+0xa4>
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	6922      	ldr	r2, [r4, #16]
 80012fe:	f003 0306 	and.w	r3, r3, #6
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf02      	ittt	eq
 8001306:	68e5      	ldreq	r5, [r4, #12]
 8001308:	6833      	ldreq	r3, [r6, #0]
 800130a:	1aed      	subeq	r5, r5, r3
 800130c:	68a3      	ldr	r3, [r4, #8]
 800130e:	bf0c      	ite	eq
 8001310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001314:	2500      	movne	r5, #0
 8001316:	4293      	cmp	r3, r2
 8001318:	bfc4      	itt	gt
 800131a:	1a9b      	subgt	r3, r3, r2
 800131c:	18ed      	addgt	r5, r5, r3
 800131e:	2600      	movs	r6, #0
 8001320:	341a      	adds	r4, #26
 8001322:	42b5      	cmp	r5, r6
 8001324:	d11a      	bne.n	800135c <_printf_common+0xc8>
 8001326:	2000      	movs	r0, #0
 8001328:	e008      	b.n	800133c <_printf_common+0xa8>
 800132a:	2301      	movs	r3, #1
 800132c:	4652      	mov	r2, sl
 800132e:	4641      	mov	r1, r8
 8001330:	4638      	mov	r0, r7
 8001332:	47c8      	blx	r9
 8001334:	3001      	adds	r0, #1
 8001336:	d103      	bne.n	8001340 <_printf_common+0xac>
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001340:	3501      	adds	r5, #1
 8001342:	e7c6      	b.n	80012d2 <_printf_common+0x3e>
 8001344:	18e1      	adds	r1, r4, r3
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	2030      	movs	r0, #48	@ 0x30
 800134a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800134e:	4422      	add	r2, r4
 8001350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001354:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001358:	3302      	adds	r3, #2
 800135a:	e7c7      	b.n	80012ec <_printf_common+0x58>
 800135c:	2301      	movs	r3, #1
 800135e:	4622      	mov	r2, r4
 8001360:	4641      	mov	r1, r8
 8001362:	4638      	mov	r0, r7
 8001364:	47c8      	blx	r9
 8001366:	3001      	adds	r0, #1
 8001368:	d0e6      	beq.n	8001338 <_printf_common+0xa4>
 800136a:	3601      	adds	r6, #1
 800136c:	e7d9      	b.n	8001322 <_printf_common+0x8e>
	...

08001370 <_printf_i>:
 8001370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001374:	7e0f      	ldrb	r7, [r1, #24]
 8001376:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001378:	2f78      	cmp	r7, #120	@ 0x78
 800137a:	4691      	mov	r9, r2
 800137c:	4680      	mov	r8, r0
 800137e:	460c      	mov	r4, r1
 8001380:	469a      	mov	sl, r3
 8001382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001386:	d807      	bhi.n	8001398 <_printf_i+0x28>
 8001388:	2f62      	cmp	r7, #98	@ 0x62
 800138a:	d80a      	bhi.n	80013a2 <_printf_i+0x32>
 800138c:	2f00      	cmp	r7, #0
 800138e:	f000 80d1 	beq.w	8001534 <_printf_i+0x1c4>
 8001392:	2f58      	cmp	r7, #88	@ 0x58
 8001394:	f000 80b8 	beq.w	8001508 <_printf_i+0x198>
 8001398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800139c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80013a0:	e03a      	b.n	8001418 <_printf_i+0xa8>
 80013a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80013a6:	2b15      	cmp	r3, #21
 80013a8:	d8f6      	bhi.n	8001398 <_printf_i+0x28>
 80013aa:	a101      	add	r1, pc, #4	@ (adr r1, 80013b0 <_printf_i+0x40>)
 80013ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013b0:	08001409 	.word	0x08001409
 80013b4:	0800141d 	.word	0x0800141d
 80013b8:	08001399 	.word	0x08001399
 80013bc:	08001399 	.word	0x08001399
 80013c0:	08001399 	.word	0x08001399
 80013c4:	08001399 	.word	0x08001399
 80013c8:	0800141d 	.word	0x0800141d
 80013cc:	08001399 	.word	0x08001399
 80013d0:	08001399 	.word	0x08001399
 80013d4:	08001399 	.word	0x08001399
 80013d8:	08001399 	.word	0x08001399
 80013dc:	0800151b 	.word	0x0800151b
 80013e0:	08001447 	.word	0x08001447
 80013e4:	080014d5 	.word	0x080014d5
 80013e8:	08001399 	.word	0x08001399
 80013ec:	08001399 	.word	0x08001399
 80013f0:	0800153d 	.word	0x0800153d
 80013f4:	08001399 	.word	0x08001399
 80013f8:	08001447 	.word	0x08001447
 80013fc:	08001399 	.word	0x08001399
 8001400:	08001399 	.word	0x08001399
 8001404:	080014dd 	.word	0x080014dd
 8001408:	6833      	ldr	r3, [r6, #0]
 800140a:	1d1a      	adds	r2, r3, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6032      	str	r2, [r6, #0]
 8001410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001418:	2301      	movs	r3, #1
 800141a:	e09c      	b.n	8001556 <_printf_i+0x1e6>
 800141c:	6833      	ldr	r3, [r6, #0]
 800141e:	6820      	ldr	r0, [r4, #0]
 8001420:	1d19      	adds	r1, r3, #4
 8001422:	6031      	str	r1, [r6, #0]
 8001424:	0606      	lsls	r6, r0, #24
 8001426:	d501      	bpl.n	800142c <_printf_i+0xbc>
 8001428:	681d      	ldr	r5, [r3, #0]
 800142a:	e003      	b.n	8001434 <_printf_i+0xc4>
 800142c:	0645      	lsls	r5, r0, #25
 800142e:	d5fb      	bpl.n	8001428 <_printf_i+0xb8>
 8001430:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001434:	2d00      	cmp	r5, #0
 8001436:	da03      	bge.n	8001440 <_printf_i+0xd0>
 8001438:	232d      	movs	r3, #45	@ 0x2d
 800143a:	426d      	negs	r5, r5
 800143c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001440:	4858      	ldr	r0, [pc, #352]	@ (80015a4 <_printf_i+0x234>)
 8001442:	230a      	movs	r3, #10
 8001444:	e011      	b.n	800146a <_printf_i+0xfa>
 8001446:	6821      	ldr	r1, [r4, #0]
 8001448:	6833      	ldr	r3, [r6, #0]
 800144a:	0608      	lsls	r0, r1, #24
 800144c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001450:	d402      	bmi.n	8001458 <_printf_i+0xe8>
 8001452:	0649      	lsls	r1, r1, #25
 8001454:	bf48      	it	mi
 8001456:	b2ad      	uxthmi	r5, r5
 8001458:	2f6f      	cmp	r7, #111	@ 0x6f
 800145a:	4852      	ldr	r0, [pc, #328]	@ (80015a4 <_printf_i+0x234>)
 800145c:	6033      	str	r3, [r6, #0]
 800145e:	bf14      	ite	ne
 8001460:	230a      	movne	r3, #10
 8001462:	2308      	moveq	r3, #8
 8001464:	2100      	movs	r1, #0
 8001466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800146a:	6866      	ldr	r6, [r4, #4]
 800146c:	60a6      	str	r6, [r4, #8]
 800146e:	2e00      	cmp	r6, #0
 8001470:	db05      	blt.n	800147e <_printf_i+0x10e>
 8001472:	6821      	ldr	r1, [r4, #0]
 8001474:	432e      	orrs	r6, r5
 8001476:	f021 0104 	bic.w	r1, r1, #4
 800147a:	6021      	str	r1, [r4, #0]
 800147c:	d04b      	beq.n	8001516 <_printf_i+0x1a6>
 800147e:	4616      	mov	r6, r2
 8001480:	fbb5 f1f3 	udiv	r1, r5, r3
 8001484:	fb03 5711 	mls	r7, r3, r1, r5
 8001488:	5dc7      	ldrb	r7, [r0, r7]
 800148a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800148e:	462f      	mov	r7, r5
 8001490:	42bb      	cmp	r3, r7
 8001492:	460d      	mov	r5, r1
 8001494:	d9f4      	bls.n	8001480 <_printf_i+0x110>
 8001496:	2b08      	cmp	r3, #8
 8001498:	d10b      	bne.n	80014b2 <_printf_i+0x142>
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	07df      	lsls	r7, r3, #31
 800149e:	d508      	bpl.n	80014b2 <_printf_i+0x142>
 80014a0:	6923      	ldr	r3, [r4, #16]
 80014a2:	6861      	ldr	r1, [r4, #4]
 80014a4:	4299      	cmp	r1, r3
 80014a6:	bfde      	ittt	le
 80014a8:	2330      	movle	r3, #48	@ 0x30
 80014aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014b2:	1b92      	subs	r2, r2, r6
 80014b4:	6122      	str	r2, [r4, #16]
 80014b6:	f8cd a000 	str.w	sl, [sp]
 80014ba:	464b      	mov	r3, r9
 80014bc:	aa03      	add	r2, sp, #12
 80014be:	4621      	mov	r1, r4
 80014c0:	4640      	mov	r0, r8
 80014c2:	f7ff fee7 	bl	8001294 <_printf_common>
 80014c6:	3001      	adds	r0, #1
 80014c8:	d14a      	bne.n	8001560 <_printf_i+0x1f0>
 80014ca:	f04f 30ff 	mov.w	r0, #4294967295
 80014ce:	b004      	add	sp, #16
 80014d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	f043 0320 	orr.w	r3, r3, #32
 80014da:	6023      	str	r3, [r4, #0]
 80014dc:	4832      	ldr	r0, [pc, #200]	@ (80015a8 <_printf_i+0x238>)
 80014de:	2778      	movs	r7, #120	@ 0x78
 80014e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	6831      	ldr	r1, [r6, #0]
 80014e8:	061f      	lsls	r7, r3, #24
 80014ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80014ee:	d402      	bmi.n	80014f6 <_printf_i+0x186>
 80014f0:	065f      	lsls	r7, r3, #25
 80014f2:	bf48      	it	mi
 80014f4:	b2ad      	uxthmi	r5, r5
 80014f6:	6031      	str	r1, [r6, #0]
 80014f8:	07d9      	lsls	r1, r3, #31
 80014fa:	bf44      	itt	mi
 80014fc:	f043 0320 	orrmi.w	r3, r3, #32
 8001500:	6023      	strmi	r3, [r4, #0]
 8001502:	b11d      	cbz	r5, 800150c <_printf_i+0x19c>
 8001504:	2310      	movs	r3, #16
 8001506:	e7ad      	b.n	8001464 <_printf_i+0xf4>
 8001508:	4826      	ldr	r0, [pc, #152]	@ (80015a4 <_printf_i+0x234>)
 800150a:	e7e9      	b.n	80014e0 <_printf_i+0x170>
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	f023 0320 	bic.w	r3, r3, #32
 8001512:	6023      	str	r3, [r4, #0]
 8001514:	e7f6      	b.n	8001504 <_printf_i+0x194>
 8001516:	4616      	mov	r6, r2
 8001518:	e7bd      	b.n	8001496 <_printf_i+0x126>
 800151a:	6833      	ldr	r3, [r6, #0]
 800151c:	6825      	ldr	r5, [r4, #0]
 800151e:	6961      	ldr	r1, [r4, #20]
 8001520:	1d18      	adds	r0, r3, #4
 8001522:	6030      	str	r0, [r6, #0]
 8001524:	062e      	lsls	r6, r5, #24
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	d501      	bpl.n	800152e <_printf_i+0x1be>
 800152a:	6019      	str	r1, [r3, #0]
 800152c:	e002      	b.n	8001534 <_printf_i+0x1c4>
 800152e:	0668      	lsls	r0, r5, #25
 8001530:	d5fb      	bpl.n	800152a <_printf_i+0x1ba>
 8001532:	8019      	strh	r1, [r3, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	6123      	str	r3, [r4, #16]
 8001538:	4616      	mov	r6, r2
 800153a:	e7bc      	b.n	80014b6 <_printf_i+0x146>
 800153c:	6833      	ldr	r3, [r6, #0]
 800153e:	1d1a      	adds	r2, r3, #4
 8001540:	6032      	str	r2, [r6, #0]
 8001542:	681e      	ldr	r6, [r3, #0]
 8001544:	6862      	ldr	r2, [r4, #4]
 8001546:	2100      	movs	r1, #0
 8001548:	4630      	mov	r0, r6
 800154a:	f7fe fe49 	bl	80001e0 <memchr>
 800154e:	b108      	cbz	r0, 8001554 <_printf_i+0x1e4>
 8001550:	1b80      	subs	r0, r0, r6
 8001552:	6060      	str	r0, [r4, #4]
 8001554:	6863      	ldr	r3, [r4, #4]
 8001556:	6123      	str	r3, [r4, #16]
 8001558:	2300      	movs	r3, #0
 800155a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800155e:	e7aa      	b.n	80014b6 <_printf_i+0x146>
 8001560:	6923      	ldr	r3, [r4, #16]
 8001562:	4632      	mov	r2, r6
 8001564:	4649      	mov	r1, r9
 8001566:	4640      	mov	r0, r8
 8001568:	47d0      	blx	sl
 800156a:	3001      	adds	r0, #1
 800156c:	d0ad      	beq.n	80014ca <_printf_i+0x15a>
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	079b      	lsls	r3, r3, #30
 8001572:	d413      	bmi.n	800159c <_printf_i+0x22c>
 8001574:	68e0      	ldr	r0, [r4, #12]
 8001576:	9b03      	ldr	r3, [sp, #12]
 8001578:	4298      	cmp	r0, r3
 800157a:	bfb8      	it	lt
 800157c:	4618      	movlt	r0, r3
 800157e:	e7a6      	b.n	80014ce <_printf_i+0x15e>
 8001580:	2301      	movs	r3, #1
 8001582:	4632      	mov	r2, r6
 8001584:	4649      	mov	r1, r9
 8001586:	4640      	mov	r0, r8
 8001588:	47d0      	blx	sl
 800158a:	3001      	adds	r0, #1
 800158c:	d09d      	beq.n	80014ca <_printf_i+0x15a>
 800158e:	3501      	adds	r5, #1
 8001590:	68e3      	ldr	r3, [r4, #12]
 8001592:	9903      	ldr	r1, [sp, #12]
 8001594:	1a5b      	subs	r3, r3, r1
 8001596:	42ab      	cmp	r3, r5
 8001598:	dcf2      	bgt.n	8001580 <_printf_i+0x210>
 800159a:	e7eb      	b.n	8001574 <_printf_i+0x204>
 800159c:	2500      	movs	r5, #0
 800159e:	f104 0619 	add.w	r6, r4, #25
 80015a2:	e7f5      	b.n	8001590 <_printf_i+0x220>
 80015a4:	08001895 	.word	0x08001895
 80015a8:	080018a6 	.word	0x080018a6

080015ac <__sflush_r>:
 80015ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80015b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b4:	0716      	lsls	r6, r2, #28
 80015b6:	4605      	mov	r5, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	d454      	bmi.n	8001666 <__sflush_r+0xba>
 80015bc:	684b      	ldr	r3, [r1, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	dc02      	bgt.n	80015c8 <__sflush_r+0x1c>
 80015c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dd48      	ble.n	800165a <__sflush_r+0xae>
 80015c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80015ca:	2e00      	cmp	r6, #0
 80015cc:	d045      	beq.n	800165a <__sflush_r+0xae>
 80015ce:	2300      	movs	r3, #0
 80015d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80015d4:	682f      	ldr	r7, [r5, #0]
 80015d6:	6a21      	ldr	r1, [r4, #32]
 80015d8:	602b      	str	r3, [r5, #0]
 80015da:	d030      	beq.n	800163e <__sflush_r+0x92>
 80015dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80015de:	89a3      	ldrh	r3, [r4, #12]
 80015e0:	0759      	lsls	r1, r3, #29
 80015e2:	d505      	bpl.n	80015f0 <__sflush_r+0x44>
 80015e4:	6863      	ldr	r3, [r4, #4]
 80015e6:	1ad2      	subs	r2, r2, r3
 80015e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80015ea:	b10b      	cbz	r3, 80015f0 <__sflush_r+0x44>
 80015ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	2300      	movs	r3, #0
 80015f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80015f4:	6a21      	ldr	r1, [r4, #32]
 80015f6:	4628      	mov	r0, r5
 80015f8:	47b0      	blx	r6
 80015fa:	1c43      	adds	r3, r0, #1
 80015fc:	89a3      	ldrh	r3, [r4, #12]
 80015fe:	d106      	bne.n	800160e <__sflush_r+0x62>
 8001600:	6829      	ldr	r1, [r5, #0]
 8001602:	291d      	cmp	r1, #29
 8001604:	d82b      	bhi.n	800165e <__sflush_r+0xb2>
 8001606:	4a2a      	ldr	r2, [pc, #168]	@ (80016b0 <__sflush_r+0x104>)
 8001608:	40ca      	lsrs	r2, r1
 800160a:	07d6      	lsls	r6, r2, #31
 800160c:	d527      	bpl.n	800165e <__sflush_r+0xb2>
 800160e:	2200      	movs	r2, #0
 8001610:	6062      	str	r2, [r4, #4]
 8001612:	04d9      	lsls	r1, r3, #19
 8001614:	6922      	ldr	r2, [r4, #16]
 8001616:	6022      	str	r2, [r4, #0]
 8001618:	d504      	bpl.n	8001624 <__sflush_r+0x78>
 800161a:	1c42      	adds	r2, r0, #1
 800161c:	d101      	bne.n	8001622 <__sflush_r+0x76>
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	b903      	cbnz	r3, 8001624 <__sflush_r+0x78>
 8001622:	6560      	str	r0, [r4, #84]	@ 0x54
 8001624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001626:	602f      	str	r7, [r5, #0]
 8001628:	b1b9      	cbz	r1, 800165a <__sflush_r+0xae>
 800162a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800162e:	4299      	cmp	r1, r3
 8001630:	d002      	beq.n	8001638 <__sflush_r+0x8c>
 8001632:	4628      	mov	r0, r5
 8001634:	f7ff fbf4 	bl	8000e20 <_free_r>
 8001638:	2300      	movs	r3, #0
 800163a:	6363      	str	r3, [r4, #52]	@ 0x34
 800163c:	e00d      	b.n	800165a <__sflush_r+0xae>
 800163e:	2301      	movs	r3, #1
 8001640:	4628      	mov	r0, r5
 8001642:	47b0      	blx	r6
 8001644:	4602      	mov	r2, r0
 8001646:	1c50      	adds	r0, r2, #1
 8001648:	d1c9      	bne.n	80015de <__sflush_r+0x32>
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0c6      	beq.n	80015de <__sflush_r+0x32>
 8001650:	2b1d      	cmp	r3, #29
 8001652:	d001      	beq.n	8001658 <__sflush_r+0xac>
 8001654:	2b16      	cmp	r3, #22
 8001656:	d11e      	bne.n	8001696 <__sflush_r+0xea>
 8001658:	602f      	str	r7, [r5, #0]
 800165a:	2000      	movs	r0, #0
 800165c:	e022      	b.n	80016a4 <__sflush_r+0xf8>
 800165e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001662:	b21b      	sxth	r3, r3
 8001664:	e01b      	b.n	800169e <__sflush_r+0xf2>
 8001666:	690f      	ldr	r7, [r1, #16]
 8001668:	2f00      	cmp	r7, #0
 800166a:	d0f6      	beq.n	800165a <__sflush_r+0xae>
 800166c:	0793      	lsls	r3, r2, #30
 800166e:	680e      	ldr	r6, [r1, #0]
 8001670:	bf08      	it	eq
 8001672:	694b      	ldreq	r3, [r1, #20]
 8001674:	600f      	str	r7, [r1, #0]
 8001676:	bf18      	it	ne
 8001678:	2300      	movne	r3, #0
 800167a:	eba6 0807 	sub.w	r8, r6, r7
 800167e:	608b      	str	r3, [r1, #8]
 8001680:	f1b8 0f00 	cmp.w	r8, #0
 8001684:	dde9      	ble.n	800165a <__sflush_r+0xae>
 8001686:	6a21      	ldr	r1, [r4, #32]
 8001688:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800168a:	4643      	mov	r3, r8
 800168c:	463a      	mov	r2, r7
 800168e:	4628      	mov	r0, r5
 8001690:	47b0      	blx	r6
 8001692:	2800      	cmp	r0, #0
 8001694:	dc08      	bgt.n	80016a8 <__sflush_r+0xfc>
 8001696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800169a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800169e:	81a3      	strh	r3, [r4, #12]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016a8:	4407      	add	r7, r0
 80016aa:	eba8 0800 	sub.w	r8, r8, r0
 80016ae:	e7e7      	b.n	8001680 <__sflush_r+0xd4>
 80016b0:	20400001 	.word	0x20400001

080016b4 <_fflush_r>:
 80016b4:	b538      	push	{r3, r4, r5, lr}
 80016b6:	690b      	ldr	r3, [r1, #16]
 80016b8:	4605      	mov	r5, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	b913      	cbnz	r3, 80016c4 <_fflush_r+0x10>
 80016be:	2500      	movs	r5, #0
 80016c0:	4628      	mov	r0, r5
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	b118      	cbz	r0, 80016ce <_fflush_r+0x1a>
 80016c6:	6a03      	ldr	r3, [r0, #32]
 80016c8:	b90b      	cbnz	r3, 80016ce <_fflush_r+0x1a>
 80016ca:	f7ff f9af 	bl	8000a2c <__sinit>
 80016ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f3      	beq.n	80016be <_fflush_r+0xa>
 80016d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80016d8:	07d0      	lsls	r0, r2, #31
 80016da:	d404      	bmi.n	80016e6 <_fflush_r+0x32>
 80016dc:	0599      	lsls	r1, r3, #22
 80016de:	d402      	bmi.n	80016e6 <_fflush_r+0x32>
 80016e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016e2:	f7ff fb9a 	bl	8000e1a <__retarget_lock_acquire_recursive>
 80016e6:	4628      	mov	r0, r5
 80016e8:	4621      	mov	r1, r4
 80016ea:	f7ff ff5f 	bl	80015ac <__sflush_r>
 80016ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016f0:	07da      	lsls	r2, r3, #31
 80016f2:	4605      	mov	r5, r0
 80016f4:	d4e4      	bmi.n	80016c0 <_fflush_r+0xc>
 80016f6:	89a3      	ldrh	r3, [r4, #12]
 80016f8:	059b      	lsls	r3, r3, #22
 80016fa:	d4e1      	bmi.n	80016c0 <_fflush_r+0xc>
 80016fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016fe:	f7ff fb8d 	bl	8000e1c <__retarget_lock_release_recursive>
 8001702:	e7dd      	b.n	80016c0 <_fflush_r+0xc>

08001704 <__swhatbuf_r>:
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	460c      	mov	r4, r1
 8001708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800170c:	2900      	cmp	r1, #0
 800170e:	b096      	sub	sp, #88	@ 0x58
 8001710:	4615      	mov	r5, r2
 8001712:	461e      	mov	r6, r3
 8001714:	da0d      	bge.n	8001732 <__swhatbuf_r+0x2e>
 8001716:	89a3      	ldrh	r3, [r4, #12]
 8001718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	bf14      	ite	ne
 8001722:	2340      	movne	r3, #64	@ 0x40
 8001724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001728:	2000      	movs	r0, #0
 800172a:	6031      	str	r1, [r6, #0]
 800172c:	602b      	str	r3, [r5, #0]
 800172e:	b016      	add	sp, #88	@ 0x58
 8001730:	bd70      	pop	{r4, r5, r6, pc}
 8001732:	466a      	mov	r2, sp
 8001734:	f000 f848 	bl	80017c8 <_fstat_r>
 8001738:	2800      	cmp	r0, #0
 800173a:	dbec      	blt.n	8001716 <__swhatbuf_r+0x12>
 800173c:	9901      	ldr	r1, [sp, #4]
 800173e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001746:	4259      	negs	r1, r3
 8001748:	4159      	adcs	r1, r3
 800174a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800174e:	e7eb      	b.n	8001728 <__swhatbuf_r+0x24>

08001750 <__smakebuf_r>:
 8001750:	898b      	ldrh	r3, [r1, #12]
 8001752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001754:	079d      	lsls	r5, r3, #30
 8001756:	4606      	mov	r6, r0
 8001758:	460c      	mov	r4, r1
 800175a:	d507      	bpl.n	800176c <__smakebuf_r+0x1c>
 800175c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001760:	6023      	str	r3, [r4, #0]
 8001762:	6123      	str	r3, [r4, #16]
 8001764:	2301      	movs	r3, #1
 8001766:	6163      	str	r3, [r4, #20]
 8001768:	b003      	add	sp, #12
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	ab01      	add	r3, sp, #4
 800176e:	466a      	mov	r2, sp
 8001770:	f7ff ffc8 	bl	8001704 <__swhatbuf_r>
 8001774:	9f00      	ldr	r7, [sp, #0]
 8001776:	4605      	mov	r5, r0
 8001778:	4639      	mov	r1, r7
 800177a:	4630      	mov	r0, r6
 800177c:	f7ff fbbc 	bl	8000ef8 <_malloc_r>
 8001780:	b948      	cbnz	r0, 8001796 <__smakebuf_r+0x46>
 8001782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001786:	059a      	lsls	r2, r3, #22
 8001788:	d4ee      	bmi.n	8001768 <__smakebuf_r+0x18>
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	81a3      	strh	r3, [r4, #12]
 8001794:	e7e2      	b.n	800175c <__smakebuf_r+0xc>
 8001796:	89a3      	ldrh	r3, [r4, #12]
 8001798:	6020      	str	r0, [r4, #0]
 800179a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800179e:	81a3      	strh	r3, [r4, #12]
 80017a0:	9b01      	ldr	r3, [sp, #4]
 80017a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80017a6:	b15b      	cbz	r3, 80017c0 <__smakebuf_r+0x70>
 80017a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017ac:	4630      	mov	r0, r6
 80017ae:	f000 f81d 	bl	80017ec <_isatty_r>
 80017b2:	b128      	cbz	r0, 80017c0 <__smakebuf_r+0x70>
 80017b4:	89a3      	ldrh	r3, [r4, #12]
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	81a3      	strh	r3, [r4, #12]
 80017c0:	89a3      	ldrh	r3, [r4, #12]
 80017c2:	431d      	orrs	r5, r3
 80017c4:	81a5      	strh	r5, [r4, #12]
 80017c6:	e7cf      	b.n	8001768 <__smakebuf_r+0x18>

080017c8 <_fstat_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4d07      	ldr	r5, [pc, #28]	@ (80017e8 <_fstat_r+0x20>)
 80017cc:	2300      	movs	r3, #0
 80017ce:	4604      	mov	r4, r0
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	602b      	str	r3, [r5, #0]
 80017d6:	f7fe ff7e 	bl	80006d6 <_fstat>
 80017da:	1c43      	adds	r3, r0, #1
 80017dc:	d102      	bne.n	80017e4 <_fstat_r+0x1c>
 80017de:	682b      	ldr	r3, [r5, #0]
 80017e0:	b103      	cbz	r3, 80017e4 <_fstat_r+0x1c>
 80017e2:	6023      	str	r3, [r4, #0]
 80017e4:	bd38      	pop	{r3, r4, r5, pc}
 80017e6:	bf00      	nop
 80017e8:	200014a4 	.word	0x200014a4

080017ec <_isatty_r>:
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4d06      	ldr	r5, [pc, #24]	@ (8001808 <_isatty_r+0x1c>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	602b      	str	r3, [r5, #0]
 80017f8:	f7fe ff7d 	bl	80006f6 <_isatty>
 80017fc:	1c43      	adds	r3, r0, #1
 80017fe:	d102      	bne.n	8001806 <_isatty_r+0x1a>
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	b103      	cbz	r3, 8001806 <_isatty_r+0x1a>
 8001804:	6023      	str	r3, [r4, #0]
 8001806:	bd38      	pop	{r3, r4, r5, pc}
 8001808:	200014a4 	.word	0x200014a4

0800180c <_sbrk_r>:
 800180c:	b538      	push	{r3, r4, r5, lr}
 800180e:	4d06      	ldr	r5, [pc, #24]	@ (8001828 <_sbrk_r+0x1c>)
 8001810:	2300      	movs	r3, #0
 8001812:	4604      	mov	r4, r0
 8001814:	4608      	mov	r0, r1
 8001816:	602b      	str	r3, [r5, #0]
 8001818:	f7fe ff86 	bl	8000728 <_sbrk>
 800181c:	1c43      	adds	r3, r0, #1
 800181e:	d102      	bne.n	8001826 <_sbrk_r+0x1a>
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	b103      	cbz	r3, 8001826 <_sbrk_r+0x1a>
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	bd38      	pop	{r3, r4, r5, pc}
 8001828:	200014a4 	.word	0x200014a4

0800182c <_init>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	bf00      	nop
 8001830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001832:	bc08      	pop	{r3}
 8001834:	469e      	mov	lr, r3
 8001836:	4770      	bx	lr

08001838 <_fini>:
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183a:	bf00      	nop
 800183c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183e:	bc08      	pop	{r3}
 8001840:	469e      	mov	lr, r3
 8001842:	4770      	bx	lr
